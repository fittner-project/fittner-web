/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Fittner API
 * Fittner API with Spring Boot
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  ApiResponseMessageBrandColorResDto,
  ApiResponseMessageHardUpdateResDto,
  ApiResponseMessageSplashResDto,
  ApiResponseMessageStatusChkResDto,
  GetUserCommonAppVersionChkParams,
  GetUserCommonSplashParams,
  GetUserCommonStatusChkParams
} from '.././models'
import { axiosInstance } from '../../mutator/instance-wrapper';



/**
 * Ìä∏Î†àÏù¥ÎÑà ÏÉÅÌÉú Ï≤¥ÌÅ¨ API ÏûÖÎãàÎã§.
 * @summary Ìä∏Î†àÏù¥ÎÑà ÏÉÅÌÉú Ï≤¥ÌÅ¨ API
 */
export const getUserCommonStatusChk = (
    params: GetUserCommonStatusChkParams,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageStatusChkResDto>(
      {url: `/api/v1/user/common/status-chk`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUserCommonStatusChkQueryKey = (params: GetUserCommonStatusChkParams,) => {
    return [`/api/v1/user/common/status-chk`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserCommonStatusChkInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserCommonStatusChk>>, GetUserCommonStatusChkParams['page']>, TError = unknown>(params: GetUserCommonStatusChkParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserCommonStatusChk>>, TError, TData, Awaited<ReturnType<typeof getUserCommonStatusChk>>, QueryKey, GetUserCommonStatusChkParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserCommonStatusChkQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserCommonStatusChk>>, QueryKey, GetUserCommonStatusChkParams['page']> = ({ signal, pageParam }) => getUserCommonStatusChk({...params, page: pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserCommonStatusChk>>, TError, TData, Awaited<ReturnType<typeof getUserCommonStatusChk>>, QueryKey, GetUserCommonStatusChkParams['page']> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserCommonStatusChkInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserCommonStatusChk>>>
export type GetUserCommonStatusChkInfiniteQueryError = unknown


export function useGetUserCommonStatusChkInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserCommonStatusChk>>, GetUserCommonStatusChkParams['page']>, TError = unknown>(
 params: GetUserCommonStatusChkParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserCommonStatusChk>>, TError, TData, Awaited<ReturnType<typeof getUserCommonStatusChk>>, QueryKey, GetUserCommonStatusChkParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserCommonStatusChk>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserCommonStatusChkInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserCommonStatusChk>>, GetUserCommonStatusChkParams['page']>, TError = unknown>(
 params: GetUserCommonStatusChkParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserCommonStatusChk>>, TError, TData, Awaited<ReturnType<typeof getUserCommonStatusChk>>, QueryKey, GetUserCommonStatusChkParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserCommonStatusChk>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserCommonStatusChkInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserCommonStatusChk>>, GetUserCommonStatusChkParams['page']>, TError = unknown>(
 params: GetUserCommonStatusChkParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserCommonStatusChk>>, TError, TData, Awaited<ReturnType<typeof getUserCommonStatusChk>>, QueryKey, GetUserCommonStatusChkParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ìä∏Î†àÏù¥ÎÑà ÏÉÅÌÉú Ï≤¥ÌÅ¨ API
 */

export function useGetUserCommonStatusChkInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserCommonStatusChk>>, GetUserCommonStatusChkParams['page']>, TError = unknown>(
 params: GetUserCommonStatusChkParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserCommonStatusChk>>, TError, TData, Awaited<ReturnType<typeof getUserCommonStatusChk>>, QueryKey, GetUserCommonStatusChkParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserCommonStatusChkInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserCommonStatusChkQueryOptions = <TData = Awaited<ReturnType<typeof getUserCommonStatusChk>>, TError = unknown>(params: GetUserCommonStatusChkParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCommonStatusChk>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserCommonStatusChkQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserCommonStatusChk>>> = ({ signal }) => getUserCommonStatusChk(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserCommonStatusChk>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserCommonStatusChkQueryResult = NonNullable<Awaited<ReturnType<typeof getUserCommonStatusChk>>>
export type GetUserCommonStatusChkQueryError = unknown


export function useGetUserCommonStatusChk<TData = Awaited<ReturnType<typeof getUserCommonStatusChk>>, TError = unknown>(
 params: GetUserCommonStatusChkParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCommonStatusChk>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserCommonStatusChk>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserCommonStatusChk<TData = Awaited<ReturnType<typeof getUserCommonStatusChk>>, TError = unknown>(
 params: GetUserCommonStatusChkParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCommonStatusChk>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserCommonStatusChk>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserCommonStatusChk<TData = Awaited<ReturnType<typeof getUserCommonStatusChk>>, TError = unknown>(
 params: GetUserCommonStatusChkParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCommonStatusChk>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ìä∏Î†àÏù¥ÎÑà ÏÉÅÌÉú Ï≤¥ÌÅ¨ API
 */

export function useGetUserCommonStatusChk<TData = Awaited<ReturnType<typeof getUserCommonStatusChk>>, TError = unknown>(
 params: GetUserCommonStatusChkParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCommonStatusChk>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserCommonStatusChkQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Ïä§ÌîåÎûòÏãú Ï°∞Ìöå API ÏûÖÎãàÎã§.
 * @summary Ïä§ÌîåÎûòÏãú API
 */
export const getUserCommonSplash = (
    params?: GetUserCommonSplashParams,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageSplashResDto>(
      {url: `/api/v1/user/common/splash`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUserCommonSplashQueryKey = (params?: GetUserCommonSplashParams,) => {
    return [`/api/v1/user/common/splash`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserCommonSplashInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserCommonSplash>>, GetUserCommonSplashParams['page']>, TError = unknown>(params?: GetUserCommonSplashParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserCommonSplash>>, TError, TData, Awaited<ReturnType<typeof getUserCommonSplash>>, QueryKey, GetUserCommonSplashParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserCommonSplashQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserCommonSplash>>, QueryKey, GetUserCommonSplashParams['page']> = ({ signal, pageParam }) => getUserCommonSplash({...params, page: pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserCommonSplash>>, TError, TData, Awaited<ReturnType<typeof getUserCommonSplash>>, QueryKey, GetUserCommonSplashParams['page']> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserCommonSplashInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserCommonSplash>>>
export type GetUserCommonSplashInfiniteQueryError = unknown


export function useGetUserCommonSplashInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserCommonSplash>>, GetUserCommonSplashParams['page']>, TError = unknown>(
 params: undefined |  GetUserCommonSplashParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserCommonSplash>>, TError, TData, Awaited<ReturnType<typeof getUserCommonSplash>>, QueryKey, GetUserCommonSplashParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserCommonSplash>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserCommonSplashInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserCommonSplash>>, GetUserCommonSplashParams['page']>, TError = unknown>(
 params?: GetUserCommonSplashParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserCommonSplash>>, TError, TData, Awaited<ReturnType<typeof getUserCommonSplash>>, QueryKey, GetUserCommonSplashParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserCommonSplash>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserCommonSplashInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserCommonSplash>>, GetUserCommonSplashParams['page']>, TError = unknown>(
 params?: GetUserCommonSplashParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserCommonSplash>>, TError, TData, Awaited<ReturnType<typeof getUserCommonSplash>>, QueryKey, GetUserCommonSplashParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ïä§ÌîåÎûòÏãú API
 */

export function useGetUserCommonSplashInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserCommonSplash>>, GetUserCommonSplashParams['page']>, TError = unknown>(
 params?: GetUserCommonSplashParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserCommonSplash>>, TError, TData, Awaited<ReturnType<typeof getUserCommonSplash>>, QueryKey, GetUserCommonSplashParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserCommonSplashInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserCommonSplashQueryOptions = <TData = Awaited<ReturnType<typeof getUserCommonSplash>>, TError = unknown>(params?: GetUserCommonSplashParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCommonSplash>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserCommonSplashQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserCommonSplash>>> = ({ signal }) => getUserCommonSplash(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserCommonSplash>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserCommonSplashQueryResult = NonNullable<Awaited<ReturnType<typeof getUserCommonSplash>>>
export type GetUserCommonSplashQueryError = unknown


export function useGetUserCommonSplash<TData = Awaited<ReturnType<typeof getUserCommonSplash>>, TError = unknown>(
 params: undefined |  GetUserCommonSplashParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCommonSplash>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserCommonSplash>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserCommonSplash<TData = Awaited<ReturnType<typeof getUserCommonSplash>>, TError = unknown>(
 params?: GetUserCommonSplashParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCommonSplash>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserCommonSplash>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserCommonSplash<TData = Awaited<ReturnType<typeof getUserCommonSplash>>, TError = unknown>(
 params?: GetUserCommonSplashParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCommonSplash>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ïä§ÌîåÎûòÏãú API
 */

export function useGetUserCommonSplash<TData = Awaited<ReturnType<typeof getUserCommonSplash>>, TError = unknown>(
 params?: GetUserCommonSplashParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCommonSplash>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserCommonSplashQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Î∏åÎûúÎìúÏª¨Îü¨ Ï°∞Ìöå API ÏûÖÎãàÎã§.
 * @summary Î∏åÎûúÎìúÏª¨Îü¨ Ï°∞Ìöå API
 */
export const getUserCommonBrandColor = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageBrandColorResDto>(
      {url: `/api/v1/user/common/brand-color`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserCommonBrandColorQueryKey = () => {
    return [`/api/v1/user/common/brand-color`] as const;
    }

    
export const getGetUserCommonBrandColorInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserCommonBrandColor>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserCommonBrandColor>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserCommonBrandColorQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserCommonBrandColor>>> = ({ signal }) => getUserCommonBrandColor(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserCommonBrandColor>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserCommonBrandColorInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserCommonBrandColor>>>
export type GetUserCommonBrandColorInfiniteQueryError = unknown


export function useGetUserCommonBrandColorInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserCommonBrandColor>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserCommonBrandColor>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserCommonBrandColor>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserCommonBrandColorInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserCommonBrandColor>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserCommonBrandColor>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserCommonBrandColor>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserCommonBrandColorInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserCommonBrandColor>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserCommonBrandColor>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Î∏åÎûúÎìúÏª¨Îü¨ Ï°∞Ìöå API
 */

export function useGetUserCommonBrandColorInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserCommonBrandColor>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserCommonBrandColor>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserCommonBrandColorInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserCommonBrandColorQueryOptions = <TData = Awaited<ReturnType<typeof getUserCommonBrandColor>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCommonBrandColor>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserCommonBrandColorQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserCommonBrandColor>>> = ({ signal }) => getUserCommonBrandColor(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserCommonBrandColor>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserCommonBrandColorQueryResult = NonNullable<Awaited<ReturnType<typeof getUserCommonBrandColor>>>
export type GetUserCommonBrandColorQueryError = unknown


export function useGetUserCommonBrandColor<TData = Awaited<ReturnType<typeof getUserCommonBrandColor>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCommonBrandColor>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserCommonBrandColor>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserCommonBrandColor<TData = Awaited<ReturnType<typeof getUserCommonBrandColor>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCommonBrandColor>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserCommonBrandColor>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserCommonBrandColor<TData = Awaited<ReturnType<typeof getUserCommonBrandColor>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCommonBrandColor>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Î∏åÎûúÎìúÏª¨Îü¨ Ï°∞Ìöå API
 */

export function useGetUserCommonBrandColor<TData = Awaited<ReturnType<typeof getUserCommonBrandColor>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCommonBrandColor>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserCommonBrandColorQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Ïï± Î≤ÑÏ†Ñ ÌôïÏù∏ API ÏûÖÎãàÎã§.
 * @summary Ïï± Î≤ÑÏ†Ñ ÌôïÏù∏ Ï°∞Ìöå API
 */
export const getUserCommonAppVersionChk = (
    params: GetUserCommonAppVersionChkParams,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageHardUpdateResDto>(
      {url: `/api/v1/user/common/app/version-chk`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUserCommonAppVersionChkQueryKey = (params: GetUserCommonAppVersionChkParams,) => {
    return [`/api/v1/user/common/app/version-chk`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserCommonAppVersionChkInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserCommonAppVersionChk>>, GetUserCommonAppVersionChkParams['page']>, TError = unknown>(params: GetUserCommonAppVersionChkParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserCommonAppVersionChk>>, TError, TData, Awaited<ReturnType<typeof getUserCommonAppVersionChk>>, QueryKey, GetUserCommonAppVersionChkParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserCommonAppVersionChkQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserCommonAppVersionChk>>, QueryKey, GetUserCommonAppVersionChkParams['page']> = ({ signal, pageParam }) => getUserCommonAppVersionChk({...params, page: pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserCommonAppVersionChk>>, TError, TData, Awaited<ReturnType<typeof getUserCommonAppVersionChk>>, QueryKey, GetUserCommonAppVersionChkParams['page']> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserCommonAppVersionChkInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserCommonAppVersionChk>>>
export type GetUserCommonAppVersionChkInfiniteQueryError = unknown


export function useGetUserCommonAppVersionChkInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserCommonAppVersionChk>>, GetUserCommonAppVersionChkParams['page']>, TError = unknown>(
 params: GetUserCommonAppVersionChkParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserCommonAppVersionChk>>, TError, TData, Awaited<ReturnType<typeof getUserCommonAppVersionChk>>, QueryKey, GetUserCommonAppVersionChkParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserCommonAppVersionChk>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserCommonAppVersionChkInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserCommonAppVersionChk>>, GetUserCommonAppVersionChkParams['page']>, TError = unknown>(
 params: GetUserCommonAppVersionChkParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserCommonAppVersionChk>>, TError, TData, Awaited<ReturnType<typeof getUserCommonAppVersionChk>>, QueryKey, GetUserCommonAppVersionChkParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserCommonAppVersionChk>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserCommonAppVersionChkInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserCommonAppVersionChk>>, GetUserCommonAppVersionChkParams['page']>, TError = unknown>(
 params: GetUserCommonAppVersionChkParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserCommonAppVersionChk>>, TError, TData, Awaited<ReturnType<typeof getUserCommonAppVersionChk>>, QueryKey, GetUserCommonAppVersionChkParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ïï± Î≤ÑÏ†Ñ ÌôïÏù∏ Ï°∞Ìöå API
 */

export function useGetUserCommonAppVersionChkInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserCommonAppVersionChk>>, GetUserCommonAppVersionChkParams['page']>, TError = unknown>(
 params: GetUserCommonAppVersionChkParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserCommonAppVersionChk>>, TError, TData, Awaited<ReturnType<typeof getUserCommonAppVersionChk>>, QueryKey, GetUserCommonAppVersionChkParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserCommonAppVersionChkInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserCommonAppVersionChkQueryOptions = <TData = Awaited<ReturnType<typeof getUserCommonAppVersionChk>>, TError = unknown>(params: GetUserCommonAppVersionChkParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCommonAppVersionChk>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserCommonAppVersionChkQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserCommonAppVersionChk>>> = ({ signal }) => getUserCommonAppVersionChk(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserCommonAppVersionChk>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserCommonAppVersionChkQueryResult = NonNullable<Awaited<ReturnType<typeof getUserCommonAppVersionChk>>>
export type GetUserCommonAppVersionChkQueryError = unknown


export function useGetUserCommonAppVersionChk<TData = Awaited<ReturnType<typeof getUserCommonAppVersionChk>>, TError = unknown>(
 params: GetUserCommonAppVersionChkParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCommonAppVersionChk>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserCommonAppVersionChk>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserCommonAppVersionChk<TData = Awaited<ReturnType<typeof getUserCommonAppVersionChk>>, TError = unknown>(
 params: GetUserCommonAppVersionChkParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCommonAppVersionChk>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserCommonAppVersionChk>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserCommonAppVersionChk<TData = Awaited<ReturnType<typeof getUserCommonAppVersionChk>>, TError = unknown>(
 params: GetUserCommonAppVersionChkParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCommonAppVersionChk>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ïï± Î≤ÑÏ†Ñ ÌôïÏù∏ Ï°∞Ìöå API
 */

export function useGetUserCommonAppVersionChk<TData = Awaited<ReturnType<typeof getUserCommonAppVersionChk>>, TError = unknown>(
 params: GetUserCommonAppVersionChkParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCommonAppVersionChk>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserCommonAppVersionChkQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



