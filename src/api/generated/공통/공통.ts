/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Fittner API
 * Fittner API with Spring Boot
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  ApiResponseMessageHardUpdateResDto,
  ApiResponseMessageSplashResDto,
  ApiResponseMessageStatusChkResDto,
  GetSplashParams,
  HardUpdateParams
} from '.././models'
import { customInstance } from '../../mutator/custom-instance';



/**
 * Ìä∏Î†àÏù¥ÎÑà ÏÉÅÌÉú Ï≤¥ÌÅ¨ API ÏûÖÎãàÎã§.</br>(trainerStatus ÏùëÎãµ ÌïÑÎìúÍ∞Ä 'STOP'ÏùºÎïåÎßå Ïû†Í∏àÌåùÏóÖ)
 * @summary Ìä∏Î†àÏù¥ÎÑà ÏÉÅÌÉú Ï≤¥ÌÅ¨ API
 */
export const statusChk = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<ApiResponseMessageStatusChkResDto>(
      {url: `/api/v1/user/common/status-chk`, method: 'GET', signal
    },
      );
    }
  

export const getStatusChkQueryKey = () => {
    return [`/api/v1/user/common/status-chk`] as const;
    }

    
export const getStatusChkInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof statusChk>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof statusChk>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getStatusChkQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof statusChk>>> = ({ signal }) => statusChk(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof statusChk>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type StatusChkInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof statusChk>>>
export type StatusChkInfiniteQueryError = unknown


export function useStatusChkInfinite<TData = InfiniteData<Awaited<ReturnType<typeof statusChk>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof statusChk>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof statusChk>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useStatusChkInfinite<TData = InfiniteData<Awaited<ReturnType<typeof statusChk>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof statusChk>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof statusChk>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useStatusChkInfinite<TData = InfiniteData<Awaited<ReturnType<typeof statusChk>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof statusChk>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ìä∏Î†àÏù¥ÎÑà ÏÉÅÌÉú Ï≤¥ÌÅ¨ API
 */

export function useStatusChkInfinite<TData = InfiniteData<Awaited<ReturnType<typeof statusChk>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof statusChk>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getStatusChkInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getStatusChkQueryOptions = <TData = Awaited<ReturnType<typeof statusChk>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof statusChk>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getStatusChkQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof statusChk>>> = ({ signal }) => statusChk(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof statusChk>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type StatusChkQueryResult = NonNullable<Awaited<ReturnType<typeof statusChk>>>
export type StatusChkQueryError = unknown


export function useStatusChk<TData = Awaited<ReturnType<typeof statusChk>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof statusChk>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof statusChk>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useStatusChk<TData = Awaited<ReturnType<typeof statusChk>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof statusChk>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof statusChk>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useStatusChk<TData = Awaited<ReturnType<typeof statusChk>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof statusChk>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ìä∏Î†àÏù¥ÎÑà ÏÉÅÌÉú Ï≤¥ÌÅ¨ API
 */

export function useStatusChk<TData = Awaited<ReturnType<typeof statusChk>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof statusChk>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getStatusChkQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Ïä§ÌîåÎûòÏãú Ï°∞Ìöå API ÏûÖÎãàÎã§.
 * @summary Ïä§ÌîåÎûòÏãú API
 */
export const getSplash = (
    params?: GetSplashParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ApiResponseMessageSplashResDto>(
      {url: `/api/v1/user/common/splash`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetSplashQueryKey = (params?: GetSplashParams,) => {
    return [`/api/v1/user/common/splash`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSplashInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getSplash>>, GetSplashParams['page']>, TError = unknown>(params?: GetSplashParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSplash>>, TError, TData, Awaited<ReturnType<typeof getSplash>>, QueryKey, GetSplashParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSplashQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSplash>>, QueryKey, GetSplashParams['page']> = ({ signal, pageParam }) => getSplash({...params, page: pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSplash>>, TError, TData, Awaited<ReturnType<typeof getSplash>>, QueryKey, GetSplashParams['page']> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSplashInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getSplash>>>
export type GetSplashInfiniteQueryError = unknown


export function useGetSplashInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getSplash>>, GetSplashParams['page']>, TError = unknown>(
 params: undefined |  GetSplashParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSplash>>, TError, TData, Awaited<ReturnType<typeof getSplash>>, QueryKey, GetSplashParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSplash>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSplashInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getSplash>>, GetSplashParams['page']>, TError = unknown>(
 params?: GetSplashParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSplash>>, TError, TData, Awaited<ReturnType<typeof getSplash>>, QueryKey, GetSplashParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSplash>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSplashInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getSplash>>, GetSplashParams['page']>, TError = unknown>(
 params?: GetSplashParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSplash>>, TError, TData, Awaited<ReturnType<typeof getSplash>>, QueryKey, GetSplashParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ïä§ÌîåÎûòÏãú API
 */

export function useGetSplashInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getSplash>>, GetSplashParams['page']>, TError = unknown>(
 params?: GetSplashParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSplash>>, TError, TData, Awaited<ReturnType<typeof getSplash>>, QueryKey, GetSplashParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSplashInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetSplashQueryOptions = <TData = Awaited<ReturnType<typeof getSplash>>, TError = unknown>(params?: GetSplashParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSplash>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSplashQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSplash>>> = ({ signal }) => getSplash(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSplash>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSplashQueryResult = NonNullable<Awaited<ReturnType<typeof getSplash>>>
export type GetSplashQueryError = unknown


export function useGetSplash<TData = Awaited<ReturnType<typeof getSplash>>, TError = unknown>(
 params: undefined |  GetSplashParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSplash>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSplash>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSplash<TData = Awaited<ReturnType<typeof getSplash>>, TError = unknown>(
 params?: GetSplashParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSplash>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSplash>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSplash<TData = Awaited<ReturnType<typeof getSplash>>, TError = unknown>(
 params?: GetSplashParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSplash>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ïä§ÌîåÎûòÏãú API
 */

export function useGetSplash<TData = Awaited<ReturnType<typeof getSplash>>, TError = unknown>(
 params?: GetSplashParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSplash>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSplashQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Ïï± Î≤ÑÏ†Ñ ÌôïÏù∏ API ÏûÖÎãàÎã§.
 * @summary Ïï± Î≤ÑÏ†Ñ ÌôïÏù∏ Ï°∞Ìöå API
 */
export const hardUpdate = (
    params: HardUpdateParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ApiResponseMessageHardUpdateResDto>(
      {url: `/api/v1/user/common/app/version-chk`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getHardUpdateQueryKey = (params: HardUpdateParams,) => {
    return [`/api/v1/user/common/app/version-chk`, ...(params ? [params]: [])] as const;
    }

    
export const getHardUpdateInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof hardUpdate>>, HardUpdateParams['page']>, TError = unknown>(params: HardUpdateParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof hardUpdate>>, TError, TData, Awaited<ReturnType<typeof hardUpdate>>, QueryKey, HardUpdateParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHardUpdateQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof hardUpdate>>, QueryKey, HardUpdateParams['page']> = ({ signal, pageParam }) => hardUpdate({...params, page: pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof hardUpdate>>, TError, TData, Awaited<ReturnType<typeof hardUpdate>>, QueryKey, HardUpdateParams['page']> & { queryKey: DataTag<QueryKey, TData> }
}

export type HardUpdateInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof hardUpdate>>>
export type HardUpdateInfiniteQueryError = unknown


export function useHardUpdateInfinite<TData = InfiniteData<Awaited<ReturnType<typeof hardUpdate>>, HardUpdateParams['page']>, TError = unknown>(
 params: HardUpdateParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof hardUpdate>>, TError, TData, Awaited<ReturnType<typeof hardUpdate>>, QueryKey, HardUpdateParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof hardUpdate>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useHardUpdateInfinite<TData = InfiniteData<Awaited<ReturnType<typeof hardUpdate>>, HardUpdateParams['page']>, TError = unknown>(
 params: HardUpdateParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof hardUpdate>>, TError, TData, Awaited<ReturnType<typeof hardUpdate>>, QueryKey, HardUpdateParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof hardUpdate>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useHardUpdateInfinite<TData = InfiniteData<Awaited<ReturnType<typeof hardUpdate>>, HardUpdateParams['page']>, TError = unknown>(
 params: HardUpdateParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof hardUpdate>>, TError, TData, Awaited<ReturnType<typeof hardUpdate>>, QueryKey, HardUpdateParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ïï± Î≤ÑÏ†Ñ ÌôïÏù∏ Ï°∞Ìöå API
 */

export function useHardUpdateInfinite<TData = InfiniteData<Awaited<ReturnType<typeof hardUpdate>>, HardUpdateParams['page']>, TError = unknown>(
 params: HardUpdateParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof hardUpdate>>, TError, TData, Awaited<ReturnType<typeof hardUpdate>>, QueryKey, HardUpdateParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getHardUpdateInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getHardUpdateQueryOptions = <TData = Awaited<ReturnType<typeof hardUpdate>>, TError = unknown>(params: HardUpdateParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof hardUpdate>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHardUpdateQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof hardUpdate>>> = ({ signal }) => hardUpdate(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof hardUpdate>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type HardUpdateQueryResult = NonNullable<Awaited<ReturnType<typeof hardUpdate>>>
export type HardUpdateQueryError = unknown


export function useHardUpdate<TData = Awaited<ReturnType<typeof hardUpdate>>, TError = unknown>(
 params: HardUpdateParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof hardUpdate>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof hardUpdate>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useHardUpdate<TData = Awaited<ReturnType<typeof hardUpdate>>, TError = unknown>(
 params: HardUpdateParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof hardUpdate>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof hardUpdate>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useHardUpdate<TData = Awaited<ReturnType<typeof hardUpdate>>, TError = unknown>(
 params: HardUpdateParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof hardUpdate>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ïï± Î≤ÑÏ†Ñ ÌôïÏù∏ Ï°∞Ìöå API
 */

export function useHardUpdate<TData = Awaited<ReturnType<typeof hardUpdate>>, TError = unknown>(
 params: HardUpdateParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof hardUpdate>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getHardUpdateQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



