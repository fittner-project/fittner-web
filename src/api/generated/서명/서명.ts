/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Fittner API
 * Fittner API with Spring Boot
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  ApiResponseMessageListSignResrvationForMemberResDto,
  ApiResponseMessageObject,
  ApiResponseMessageSignResrvationResDto,
  GetUserSignReservationsParams,
  GetUserSignReservationsTicketIdParams,
  SignReqDto
} from '.././models'
import { axiosInstance } from '../../mutator/instance-wrapper';



/**
 * 서명 요청 API 입니다.
 * @summary 서명 요청 API
 */
export const postUserSign = (
    signReqDto: SignReqDto,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageObject>(
      {url: `/api/v1/user/sign`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: signReqDto, signal
    },
      );
    }
  


export const getPostUserSignMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserSign>>, TError,{data: SignReqDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postUserSign>>, TError,{data: SignReqDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserSign>>, {data: SignReqDto}> = (props) => {
          const {data} = props ?? {};

          return  postUserSign(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserSignMutationResult = NonNullable<Awaited<ReturnType<typeof postUserSign>>>
    export type PostUserSignMutationBody = SignReqDto
    export type PostUserSignMutationError = unknown

    /**
 * @summary 서명 요청 API
 */
export const usePostUserSign = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserSign>>, TError,{data: SignReqDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postUserSign>>,
        TError,
        {data: SignReqDto},
        TContext
      > => {

      const mutationOptions = getPostUserSignMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * 서명전 날짜별 예약 리스트 조회 API 입니다.
 * @summary 서명전 날짜별 예약 리스트 조회 API
 */
export const getUserSignReservations = (
    params: GetUserSignReservationsParams,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageSignResrvationResDto>(
      {url: `/api/v1/user/sign/reservations`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUserSignReservationsQueryKey = (params: GetUserSignReservationsParams,) => {
    return [`/api/v1/user/sign/reservations`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserSignReservationsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserSignReservations>>, GetUserSignReservationsParams['page']>, TError = unknown>(params: GetUserSignReservationsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserSignReservations>>, TError, TData, Awaited<ReturnType<typeof getUserSignReservations>>, QueryKey, GetUserSignReservationsParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserSignReservationsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserSignReservations>>, QueryKey, GetUserSignReservationsParams['page']> = ({ signal, pageParam }) => getUserSignReservations({...params, page: pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserSignReservations>>, TError, TData, Awaited<ReturnType<typeof getUserSignReservations>>, QueryKey, GetUserSignReservationsParams['page']> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserSignReservationsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserSignReservations>>>
export type GetUserSignReservationsInfiniteQueryError = unknown


export function useGetUserSignReservationsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserSignReservations>>, GetUserSignReservationsParams['page']>, TError = unknown>(
 params: GetUserSignReservationsParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserSignReservations>>, TError, TData, Awaited<ReturnType<typeof getUserSignReservations>>, QueryKey, GetUserSignReservationsParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserSignReservations>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserSignReservationsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserSignReservations>>, GetUserSignReservationsParams['page']>, TError = unknown>(
 params: GetUserSignReservationsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserSignReservations>>, TError, TData, Awaited<ReturnType<typeof getUserSignReservations>>, QueryKey, GetUserSignReservationsParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserSignReservations>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserSignReservationsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserSignReservations>>, GetUserSignReservationsParams['page']>, TError = unknown>(
 params: GetUserSignReservationsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserSignReservations>>, TError, TData, Awaited<ReturnType<typeof getUserSignReservations>>, QueryKey, GetUserSignReservationsParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary 서명전 날짜별 예약 리스트 조회 API
 */

export function useGetUserSignReservationsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserSignReservations>>, GetUserSignReservationsParams['page']>, TError = unknown>(
 params: GetUserSignReservationsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserSignReservations>>, TError, TData, Awaited<ReturnType<typeof getUserSignReservations>>, QueryKey, GetUserSignReservationsParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserSignReservationsInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserSignReservationsQueryOptions = <TData = Awaited<ReturnType<typeof getUserSignReservations>>, TError = unknown>(params: GetUserSignReservationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserSignReservations>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserSignReservationsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserSignReservations>>> = ({ signal }) => getUserSignReservations(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserSignReservations>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserSignReservationsQueryResult = NonNullable<Awaited<ReturnType<typeof getUserSignReservations>>>
export type GetUserSignReservationsQueryError = unknown


export function useGetUserSignReservations<TData = Awaited<ReturnType<typeof getUserSignReservations>>, TError = unknown>(
 params: GetUserSignReservationsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserSignReservations>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserSignReservations>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserSignReservations<TData = Awaited<ReturnType<typeof getUserSignReservations>>, TError = unknown>(
 params: GetUserSignReservationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserSignReservations>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserSignReservations>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserSignReservations<TData = Awaited<ReturnType<typeof getUserSignReservations>>, TError = unknown>(
 params: GetUserSignReservationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserSignReservations>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary 서명전 날짜별 예약 리스트 조회 API
 */

export function useGetUserSignReservations<TData = Awaited<ReturnType<typeof getUserSignReservations>>, TError = unknown>(
 params: GetUserSignReservationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserSignReservations>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserSignReservationsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * 서명할 예약 리스트 조회 API 입니다.
 * @summary 서명할 예약 리스트 조회 API
 */
export const getUserSignReservationsTicketId = (
    ticketId: string,
    params?: GetUserSignReservationsTicketIdParams,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageListSignResrvationForMemberResDto>(
      {url: `/api/v1/user/sign/reservations/${ticketId}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUserSignReservationsTicketIdQueryKey = (ticketId: string,
    params?: GetUserSignReservationsTicketIdParams,) => {
    return [`/api/v1/user/sign/reservations/${ticketId}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserSignReservationsTicketIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserSignReservationsTicketId>>, GetUserSignReservationsTicketIdParams['page']>, TError = unknown>(ticketId: string,
    params?: GetUserSignReservationsTicketIdParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserSignReservationsTicketId>>, TError, TData, Awaited<ReturnType<typeof getUserSignReservationsTicketId>>, QueryKey, GetUserSignReservationsTicketIdParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserSignReservationsTicketIdQueryKey(ticketId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserSignReservationsTicketId>>, QueryKey, GetUserSignReservationsTicketIdParams['page']> = ({ signal, pageParam }) => getUserSignReservationsTicketId(ticketId,{...params, page: pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ticketId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserSignReservationsTicketId>>, TError, TData, Awaited<ReturnType<typeof getUserSignReservationsTicketId>>, QueryKey, GetUserSignReservationsTicketIdParams['page']> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserSignReservationsTicketIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserSignReservationsTicketId>>>
export type GetUserSignReservationsTicketIdInfiniteQueryError = unknown


export function useGetUserSignReservationsTicketIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserSignReservationsTicketId>>, GetUserSignReservationsTicketIdParams['page']>, TError = unknown>(
 ticketId: string,
    params: undefined |  GetUserSignReservationsTicketIdParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserSignReservationsTicketId>>, TError, TData, Awaited<ReturnType<typeof getUserSignReservationsTicketId>>, QueryKey, GetUserSignReservationsTicketIdParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserSignReservationsTicketId>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserSignReservationsTicketIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserSignReservationsTicketId>>, GetUserSignReservationsTicketIdParams['page']>, TError = unknown>(
 ticketId: string,
    params?: GetUserSignReservationsTicketIdParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserSignReservationsTicketId>>, TError, TData, Awaited<ReturnType<typeof getUserSignReservationsTicketId>>, QueryKey, GetUserSignReservationsTicketIdParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserSignReservationsTicketId>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserSignReservationsTicketIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserSignReservationsTicketId>>, GetUserSignReservationsTicketIdParams['page']>, TError = unknown>(
 ticketId: string,
    params?: GetUserSignReservationsTicketIdParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserSignReservationsTicketId>>, TError, TData, Awaited<ReturnType<typeof getUserSignReservationsTicketId>>, QueryKey, GetUserSignReservationsTicketIdParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary 서명할 예약 리스트 조회 API
 */

export function useGetUserSignReservationsTicketIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserSignReservationsTicketId>>, GetUserSignReservationsTicketIdParams['page']>, TError = unknown>(
 ticketId: string,
    params?: GetUserSignReservationsTicketIdParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserSignReservationsTicketId>>, TError, TData, Awaited<ReturnType<typeof getUserSignReservationsTicketId>>, QueryKey, GetUserSignReservationsTicketIdParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserSignReservationsTicketIdInfiniteQueryOptions(ticketId,params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserSignReservationsTicketIdQueryOptions = <TData = Awaited<ReturnType<typeof getUserSignReservationsTicketId>>, TError = unknown>(ticketId: string,
    params?: GetUserSignReservationsTicketIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserSignReservationsTicketId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserSignReservationsTicketIdQueryKey(ticketId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserSignReservationsTicketId>>> = ({ signal }) => getUserSignReservationsTicketId(ticketId,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ticketId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserSignReservationsTicketId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserSignReservationsTicketIdQueryResult = NonNullable<Awaited<ReturnType<typeof getUserSignReservationsTicketId>>>
export type GetUserSignReservationsTicketIdQueryError = unknown


export function useGetUserSignReservationsTicketId<TData = Awaited<ReturnType<typeof getUserSignReservationsTicketId>>, TError = unknown>(
 ticketId: string,
    params: undefined |  GetUserSignReservationsTicketIdParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserSignReservationsTicketId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserSignReservationsTicketId>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserSignReservationsTicketId<TData = Awaited<ReturnType<typeof getUserSignReservationsTicketId>>, TError = unknown>(
 ticketId: string,
    params?: GetUserSignReservationsTicketIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserSignReservationsTicketId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserSignReservationsTicketId>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserSignReservationsTicketId<TData = Awaited<ReturnType<typeof getUserSignReservationsTicketId>>, TError = unknown>(
 ticketId: string,
    params?: GetUserSignReservationsTicketIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserSignReservationsTicketId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary 서명할 예약 리스트 조회 API
 */

export function useGetUserSignReservationsTicketId<TData = Awaited<ReturnType<typeof getUserSignReservationsTicketId>>, TError = unknown>(
 ticketId: string,
    params?: GetUserSignReservationsTicketIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserSignReservationsTicketId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserSignReservationsTicketIdQueryOptions(ticketId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



