/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Fittner API
 * Fittner API with Spring Boot
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  ApiResponseMessageObject,
  ApiResponseMessageSignResrvationForMemberResDto,
  ApiResponseMessageSignResrvationResDto,
  GetReservationsForMemberParams,
  GetReservationsParams,
  SignReqDto
} from '.././models'
import { customInstance } from '../../mutator/custom-instance';



/**
 * 서명 요청 API 입니다.
 * @summary 서명 요청 API
 */
export const sign = (
    signReqDto: SignReqDto,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ApiResponseMessageObject>(
      {url: `/api/v1/user/sign`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: signReqDto, signal
    },
      );
    }
  


export const getSignMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sign>>, TError,{data: SignReqDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof sign>>, TError,{data: SignReqDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sign>>, {data: SignReqDto}> = (props) => {
          const {data} = props ?? {};

          return  sign(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SignMutationResult = NonNullable<Awaited<ReturnType<typeof sign>>>
    export type SignMutationBody = SignReqDto
    export type SignMutationError = unknown

    /**
 * @summary 서명 요청 API
 */
export const useSign = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sign>>, TError,{data: SignReqDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof sign>>,
        TError,
        {data: SignReqDto},
        TContext
      > => {

      const mutationOptions = getSignMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * 전체 예약 리스트 조회 API 입니다.
 * @summary 전체 예약 리스트 조회 API
 */
export const getReservations = (
    params: GetReservationsParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ApiResponseMessageSignResrvationResDto>(
      {url: `/api/v1/user/sign/reservations`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetReservationsQueryKey = (params: GetReservationsParams,) => {
    return [`/api/v1/user/sign/reservations`, ...(params ? [params]: [])] as const;
    }

    
export const getGetReservationsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getReservations>>, GetReservationsParams['page']>, TError = unknown>(params: GetReservationsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getReservations>>, TError, TData, Awaited<ReturnType<typeof getReservations>>, QueryKey, GetReservationsParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetReservationsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getReservations>>, QueryKey, GetReservationsParams['page']> = ({ signal, pageParam }) => getReservations({...params, page: pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getReservations>>, TError, TData, Awaited<ReturnType<typeof getReservations>>, QueryKey, GetReservationsParams['page']> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetReservationsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getReservations>>>
export type GetReservationsInfiniteQueryError = unknown


export function useGetReservationsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getReservations>>, GetReservationsParams['page']>, TError = unknown>(
 params: GetReservationsParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getReservations>>, TError, TData, Awaited<ReturnType<typeof getReservations>>, QueryKey, GetReservationsParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReservations>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetReservationsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getReservations>>, GetReservationsParams['page']>, TError = unknown>(
 params: GetReservationsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getReservations>>, TError, TData, Awaited<ReturnType<typeof getReservations>>, QueryKey, GetReservationsParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReservations>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetReservationsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getReservations>>, GetReservationsParams['page']>, TError = unknown>(
 params: GetReservationsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getReservations>>, TError, TData, Awaited<ReturnType<typeof getReservations>>, QueryKey, GetReservationsParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary 전체 예약 리스트 조회 API
 */

export function useGetReservationsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getReservations>>, GetReservationsParams['page']>, TError = unknown>(
 params: GetReservationsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getReservations>>, TError, TData, Awaited<ReturnType<typeof getReservations>>, QueryKey, GetReservationsParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetReservationsInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetReservationsQueryOptions = <TData = Awaited<ReturnType<typeof getReservations>>, TError = unknown>(params: GetReservationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReservations>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetReservationsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getReservations>>> = ({ signal }) => getReservations(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getReservations>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetReservationsQueryResult = NonNullable<Awaited<ReturnType<typeof getReservations>>>
export type GetReservationsQueryError = unknown


export function useGetReservations<TData = Awaited<ReturnType<typeof getReservations>>, TError = unknown>(
 params: GetReservationsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReservations>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReservations>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetReservations<TData = Awaited<ReturnType<typeof getReservations>>, TError = unknown>(
 params: GetReservationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReservations>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReservations>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetReservations<TData = Awaited<ReturnType<typeof getReservations>>, TError = unknown>(
 params: GetReservationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReservations>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary 전체 예약 리스트 조회 API
 */

export function useGetReservations<TData = Awaited<ReturnType<typeof getReservations>>, TError = unknown>(
 params: GetReservationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReservations>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetReservationsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * 회원 예약 리스트 조회 API 입니다.
 * @summary 회원 예약 리스트 조회 API
 */
export const getReservationsForMember = (
    ticketId: string,
    params: GetReservationsForMemberParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ApiResponseMessageSignResrvationForMemberResDto>(
      {url: `/api/v1/user/sign/reservations/${ticketId}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetReservationsForMemberQueryKey = (ticketId: string,
    params: GetReservationsForMemberParams,) => {
    return [`/api/v1/user/sign/reservations/${ticketId}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetReservationsForMemberInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getReservationsForMember>>, GetReservationsForMemberParams['page']>, TError = unknown>(ticketId: string,
    params: GetReservationsForMemberParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getReservationsForMember>>, TError, TData, Awaited<ReturnType<typeof getReservationsForMember>>, QueryKey, GetReservationsForMemberParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetReservationsForMemberQueryKey(ticketId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getReservationsForMember>>, QueryKey, GetReservationsForMemberParams['page']> = ({ signal, pageParam }) => getReservationsForMember(ticketId,{...params, page: pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ticketId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getReservationsForMember>>, TError, TData, Awaited<ReturnType<typeof getReservationsForMember>>, QueryKey, GetReservationsForMemberParams['page']> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetReservationsForMemberInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getReservationsForMember>>>
export type GetReservationsForMemberInfiniteQueryError = unknown


export function useGetReservationsForMemberInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getReservationsForMember>>, GetReservationsForMemberParams['page']>, TError = unknown>(
 ticketId: string,
    params: GetReservationsForMemberParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getReservationsForMember>>, TError, TData, Awaited<ReturnType<typeof getReservationsForMember>>, QueryKey, GetReservationsForMemberParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReservationsForMember>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetReservationsForMemberInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getReservationsForMember>>, GetReservationsForMemberParams['page']>, TError = unknown>(
 ticketId: string,
    params: GetReservationsForMemberParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getReservationsForMember>>, TError, TData, Awaited<ReturnType<typeof getReservationsForMember>>, QueryKey, GetReservationsForMemberParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReservationsForMember>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetReservationsForMemberInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getReservationsForMember>>, GetReservationsForMemberParams['page']>, TError = unknown>(
 ticketId: string,
    params: GetReservationsForMemberParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getReservationsForMember>>, TError, TData, Awaited<ReturnType<typeof getReservationsForMember>>, QueryKey, GetReservationsForMemberParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary 회원 예약 리스트 조회 API
 */

export function useGetReservationsForMemberInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getReservationsForMember>>, GetReservationsForMemberParams['page']>, TError = unknown>(
 ticketId: string,
    params: GetReservationsForMemberParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getReservationsForMember>>, TError, TData, Awaited<ReturnType<typeof getReservationsForMember>>, QueryKey, GetReservationsForMemberParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetReservationsForMemberInfiniteQueryOptions(ticketId,params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetReservationsForMemberQueryOptions = <TData = Awaited<ReturnType<typeof getReservationsForMember>>, TError = unknown>(ticketId: string,
    params: GetReservationsForMemberParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReservationsForMember>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetReservationsForMemberQueryKey(ticketId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getReservationsForMember>>> = ({ signal }) => getReservationsForMember(ticketId,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ticketId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getReservationsForMember>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetReservationsForMemberQueryResult = NonNullable<Awaited<ReturnType<typeof getReservationsForMember>>>
export type GetReservationsForMemberQueryError = unknown


export function useGetReservationsForMember<TData = Awaited<ReturnType<typeof getReservationsForMember>>, TError = unknown>(
 ticketId: string,
    params: GetReservationsForMemberParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReservationsForMember>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReservationsForMember>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetReservationsForMember<TData = Awaited<ReturnType<typeof getReservationsForMember>>, TError = unknown>(
 ticketId: string,
    params: GetReservationsForMemberParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReservationsForMember>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReservationsForMember>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetReservationsForMember<TData = Awaited<ReturnType<typeof getReservationsForMember>>, TError = unknown>(
 ticketId: string,
    params: GetReservationsForMemberParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReservationsForMember>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary 회원 예약 리스트 조회 API
 */

export function useGetReservationsForMember<TData = Awaited<ReturnType<typeof getReservationsForMember>>, TError = unknown>(
 ticketId: string,
    params: GetReservationsForMemberParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReservationsForMember>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetReservationsForMemberQueryOptions(ticketId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



