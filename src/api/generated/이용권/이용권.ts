/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Fittner API
 * Fittner API with Spring Boot
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  ApiResponseMessageListTicketListResDto,
  ApiResponseMessageTicketDetailResDto,
  GetTicketsParams
} from '.././models'
import { customInstance } from '../../mutator/custom-instance';



/**
 * Ï†ÑÏ≤¥ Ïù¥Ïö©Í∂å Î¶¨Ïä§Ìä∏ Ï°∞Ìöå API ÏûÖÎãàÎã§.
 * @summary Ï†ÑÏ≤¥ Ïù¥Ïö©Í∂å Î¶¨Ïä§Ìä∏ Ï°∞Ìöå API
 */
export const getTickets = (
    params: GetTicketsParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ApiResponseMessageListTicketListResDto>(
      {url: `/api/v1/user/tickets`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetTicketsQueryKey = (params: GetTicketsParams,) => {
    return [`/api/v1/user/tickets`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTicketsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getTickets>>, GetTicketsParams['page']>, TError = unknown>(params: GetTicketsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTickets>>, TError, TData, Awaited<ReturnType<typeof getTickets>>, QueryKey, GetTicketsParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTicketsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTickets>>, QueryKey, GetTicketsParams['page']> = ({ signal, pageParam }) => getTickets({...params, page: pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTickets>>, TError, TData, Awaited<ReturnType<typeof getTickets>>, QueryKey, GetTicketsParams['page']> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTicketsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getTickets>>>
export type GetTicketsInfiniteQueryError = unknown


export function useGetTicketsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getTickets>>, GetTicketsParams['page']>, TError = unknown>(
 params: GetTicketsParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTickets>>, TError, TData, Awaited<ReturnType<typeof getTickets>>, QueryKey, GetTicketsParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTickets>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTicketsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getTickets>>, GetTicketsParams['page']>, TError = unknown>(
 params: GetTicketsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTickets>>, TError, TData, Awaited<ReturnType<typeof getTickets>>, QueryKey, GetTicketsParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTickets>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTicketsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getTickets>>, GetTicketsParams['page']>, TError = unknown>(
 params: GetTicketsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTickets>>, TError, TData, Awaited<ReturnType<typeof getTickets>>, QueryKey, GetTicketsParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ï†ÑÏ≤¥ Ïù¥Ïö©Í∂å Î¶¨Ïä§Ìä∏ Ï°∞Ìöå API
 */

export function useGetTicketsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getTickets>>, GetTicketsParams['page']>, TError = unknown>(
 params: GetTicketsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTickets>>, TError, TData, Awaited<ReturnType<typeof getTickets>>, QueryKey, GetTicketsParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTicketsInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetTicketsQueryOptions = <TData = Awaited<ReturnType<typeof getTickets>>, TError = unknown>(params: GetTicketsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTickets>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTicketsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTickets>>> = ({ signal }) => getTickets(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTickets>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTicketsQueryResult = NonNullable<Awaited<ReturnType<typeof getTickets>>>
export type GetTicketsQueryError = unknown


export function useGetTickets<TData = Awaited<ReturnType<typeof getTickets>>, TError = unknown>(
 params: GetTicketsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTickets>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTickets>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTickets<TData = Awaited<ReturnType<typeof getTickets>>, TError = unknown>(
 params: GetTicketsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTickets>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTickets>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTickets<TData = Awaited<ReturnType<typeof getTickets>>, TError = unknown>(
 params: GetTicketsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTickets>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ï†ÑÏ≤¥ Ïù¥Ïö©Í∂å Î¶¨Ïä§Ìä∏ Ï°∞Ìöå API
 */

export function useGetTickets<TData = Awaited<ReturnType<typeof getTickets>>, TError = unknown>(
 params: GetTicketsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTickets>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTicketsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Ïù¥Ïö©Í∂å ÏÉÅÏÑ∏ Ï°∞Ìöå API ÏûÖÎãàÎã§.
 * @summary Ïù¥Ïö©Í∂å ÏÉÅÏÑ∏ Ï°∞Ìöå API
 */
export const getTicketDetail = (
    ticketId: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ApiResponseMessageTicketDetailResDto>(
      {url: `/api/v1/user/ticket/${ticketId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetTicketDetailQueryKey = (ticketId: string,) => {
    return [`/api/v1/user/ticket/${ticketId}`] as const;
    }

    
export const getGetTicketDetailInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getTicketDetail>>>, TError = unknown>(ticketId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTicketDetail>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTicketDetailQueryKey(ticketId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTicketDetail>>> = ({ signal }) => getTicketDetail(ticketId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ticketId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTicketDetail>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTicketDetailInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getTicketDetail>>>
export type GetTicketDetailInfiniteQueryError = unknown


export function useGetTicketDetailInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getTicketDetail>>>, TError = unknown>(
 ticketId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTicketDetail>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTicketDetail>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTicketDetailInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getTicketDetail>>>, TError = unknown>(
 ticketId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTicketDetail>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTicketDetail>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTicketDetailInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getTicketDetail>>>, TError = unknown>(
 ticketId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTicketDetail>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ïù¥Ïö©Í∂å ÏÉÅÏÑ∏ Ï°∞Ìöå API
 */

export function useGetTicketDetailInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getTicketDetail>>>, TError = unknown>(
 ticketId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTicketDetail>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTicketDetailInfiniteQueryOptions(ticketId,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetTicketDetailQueryOptions = <TData = Awaited<ReturnType<typeof getTicketDetail>>, TError = unknown>(ticketId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTicketDetail>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTicketDetailQueryKey(ticketId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTicketDetail>>> = ({ signal }) => getTicketDetail(ticketId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ticketId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTicketDetail>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTicketDetailQueryResult = NonNullable<Awaited<ReturnType<typeof getTicketDetail>>>
export type GetTicketDetailQueryError = unknown


export function useGetTicketDetail<TData = Awaited<ReturnType<typeof getTicketDetail>>, TError = unknown>(
 ticketId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTicketDetail>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTicketDetail>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTicketDetail<TData = Awaited<ReturnType<typeof getTicketDetail>>, TError = unknown>(
 ticketId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTicketDetail>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTicketDetail>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTicketDetail<TData = Awaited<ReturnType<typeof getTicketDetail>>, TError = unknown>(
 ticketId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTicketDetail>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ïù¥Ïö©Í∂å ÏÉÅÏÑ∏ Ï°∞Ìöå API
 */

export function useGetTicketDetail<TData = Awaited<ReturnType<typeof getTicketDetail>>, TError = unknown>(
 ticketId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTicketDetail>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTicketDetailQueryOptions(ticketId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



