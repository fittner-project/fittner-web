/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Fittner API
 * Fittner API with Spring Boot
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  ApiResponseMessageAssignToInfoResDto,
  ApiResponseMessageListTicketListResDto,
  ApiResponseMessageObject,
  ApiResponseMessageRefundInfoResDto,
  ApiResponseMessageTicketDetailResDto,
  AssignToNewMemberReqDto,
  AssignToOldMemberReqDto,
  GetUserTicketAssignInfoParams,
  GetUserTicketRefundInfoParams,
  GetUserTicketsParams,
  PlusReqDto,
  RefundReqDto,
  SuspendTicketReqDto
} from '.././models'
import { axiosInstance } from '../../mutator/instance-wrapper';



/**
 * Ìã∞Ïºì ÏùºÏãúÏ†ïÏßÄ Ìï¥Ï†ú API ÏûÖÎãàÎã§.
 * @summary Ìã∞Ïºì ÏùºÏãúÏ†ïÏßÄ Ìï¥Ï†ú API
 */
export const putUserTicketAgainstSuspend = (
    ticketId: string,
 ) => {
      
      
      return axiosInstance<ApiResponseMessageObject>(
      {url: `/api/v1/user/ticket/against/suspend/${ticketId}`, method: 'PUT'
    },
      );
    }
  


export const getPutUserTicketAgainstSuspendMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putUserTicketAgainstSuspend>>, TError,{ticketId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putUserTicketAgainstSuspend>>, TError,{ticketId: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putUserTicketAgainstSuspend>>, {ticketId: string}> = (props) => {
          const {ticketId} = props ?? {};

          return  putUserTicketAgainstSuspend(ticketId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutUserTicketAgainstSuspendMutationResult = NonNullable<Awaited<ReturnType<typeof putUserTicketAgainstSuspend>>>
    
    export type PutUserTicketAgainstSuspendMutationError = unknown

    /**
 * @summary Ìã∞Ïºì ÏùºÏãúÏ†ïÏßÄ Ìï¥Ï†ú API
 */
export const usePutUserTicketAgainstSuspend = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putUserTicketAgainstSuspend>>, TError,{ticketId: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof putUserTicketAgainstSuspend>>,
        TError,
        {ticketId: string},
        TContext
      > => {

      const mutationOptions = getPutUserTicketAgainstSuspendMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Ìã∞Ïºì ÏùºÏãúÏ†ïÏßÄ API ÏûÖÎãàÎã§.
 * @summary Ìã∞Ïºì ÏùºÏãúÏ†ïÏßÄ API
 */
export const postUserTicketSuspend = (
    suspendTicketReqDto: SuspendTicketReqDto,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageObject>(
      {url: `/api/v1/user/ticket/suspend`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: suspendTicketReqDto, signal
    },
      );
    }
  


export const getPostUserTicketSuspendMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserTicketSuspend>>, TError,{data: SuspendTicketReqDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postUserTicketSuspend>>, TError,{data: SuspendTicketReqDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserTicketSuspend>>, {data: SuspendTicketReqDto}> = (props) => {
          const {data} = props ?? {};

          return  postUserTicketSuspend(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserTicketSuspendMutationResult = NonNullable<Awaited<ReturnType<typeof postUserTicketSuspend>>>
    export type PostUserTicketSuspendMutationBody = SuspendTicketReqDto
    export type PostUserTicketSuspendMutationError = unknown

    /**
 * @summary Ìã∞Ïºì ÏùºÏãúÏ†ïÏßÄ API
 */
export const usePostUserTicketSuspend = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserTicketSuspend>>, TError,{data: SuspendTicketReqDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postUserTicketSuspend>>,
        TError,
        {data: SuspendTicketReqDto},
        TContext
      > => {

      const mutationOptions = getPostUserTicketSuspendMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Ïù¥Ïö©Í∂å ÌôòÎ∂à API ÏûÖÎãàÎã§.
 * @summary Ïù¥Ïö©Í∂å ÌôòÎ∂à API
 */
export const postUserTicketRefund = (
    refundReqDto: RefundReqDto,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageObject>(
      {url: `/api/v1/user/ticket/refund`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: refundReqDto, signal
    },
      );
    }
  


export const getPostUserTicketRefundMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserTicketRefund>>, TError,{data: RefundReqDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postUserTicketRefund>>, TError,{data: RefundReqDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserTicketRefund>>, {data: RefundReqDto}> = (props) => {
          const {data} = props ?? {};

          return  postUserTicketRefund(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserTicketRefundMutationResult = NonNullable<Awaited<ReturnType<typeof postUserTicketRefund>>>
    export type PostUserTicketRefundMutationBody = RefundReqDto
    export type PostUserTicketRefundMutationError = unknown

    /**
 * @summary Ïù¥Ïö©Í∂å ÌôòÎ∂à API
 */
export const usePostUserTicketRefund = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserTicketRefund>>, TError,{data: RefundReqDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postUserTicketRefund>>,
        TError,
        {data: RefundReqDto},
        TContext
      > => {

      const mutationOptions = getPostUserTicketRefundMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Ïù¥Ïö©Í∂å Ï∂îÍ∞ÄÎì±Î°ù API ÏûÖÎãàÎã§.
 * @summary Ïù¥Ïö©Í∂å Ï∂îÍ∞ÄÎì±Î°ù API
 */
export const postUserTicketPlus = (
    plusReqDto: PlusReqDto,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageObject>(
      {url: `/api/v1/user/ticket/plus`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: plusReqDto, signal
    },
      );
    }
  


export const getPostUserTicketPlusMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserTicketPlus>>, TError,{data: PlusReqDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postUserTicketPlus>>, TError,{data: PlusReqDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserTicketPlus>>, {data: PlusReqDto}> = (props) => {
          const {data} = props ?? {};

          return  postUserTicketPlus(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserTicketPlusMutationResult = NonNullable<Awaited<ReturnType<typeof postUserTicketPlus>>>
    export type PostUserTicketPlusMutationBody = PlusReqDto
    export type PostUserTicketPlusMutationError = unknown

    /**
 * @summary Ïù¥Ïö©Í∂å Ï∂îÍ∞ÄÎì±Î°ù API
 */
export const usePostUserTicketPlus = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserTicketPlus>>, TError,{data: PlusReqDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postUserTicketPlus>>,
        TError,
        {data: PlusReqDto},
        TContext
      > => {

      const mutationOptions = getPostUserTicketPlusMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Ïù¥Ïö©Í∂å Í∏∞Ï°¥ ÌöåÏõê ÏñëÎèÑ API ÏûÖÎãàÎã§.
 * @summary Ïù¥Ïö©Í∂å Í∏∞Ï°¥ ÌöåÏõê ÏñëÎèÑ API
 */
export const postUserTicketAssignOldMember = (
    assignToOldMemberReqDto: AssignToOldMemberReqDto,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageObject>(
      {url: `/api/v1/user/ticket/assign/old-member`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: assignToOldMemberReqDto, signal
    },
      );
    }
  


export const getPostUserTicketAssignOldMemberMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserTicketAssignOldMember>>, TError,{data: AssignToOldMemberReqDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postUserTicketAssignOldMember>>, TError,{data: AssignToOldMemberReqDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserTicketAssignOldMember>>, {data: AssignToOldMemberReqDto}> = (props) => {
          const {data} = props ?? {};

          return  postUserTicketAssignOldMember(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserTicketAssignOldMemberMutationResult = NonNullable<Awaited<ReturnType<typeof postUserTicketAssignOldMember>>>
    export type PostUserTicketAssignOldMemberMutationBody = AssignToOldMemberReqDto
    export type PostUserTicketAssignOldMemberMutationError = unknown

    /**
 * @summary Ïù¥Ïö©Í∂å Í∏∞Ï°¥ ÌöåÏõê ÏñëÎèÑ API
 */
export const usePostUserTicketAssignOldMember = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserTicketAssignOldMember>>, TError,{data: AssignToOldMemberReqDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postUserTicketAssignOldMember>>,
        TError,
        {data: AssignToOldMemberReqDto},
        TContext
      > => {

      const mutationOptions = getPostUserTicketAssignOldMemberMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Ïù¥Ïö©Í∂å Ïã†Í∑ú ÌöåÏõê ÏñëÎèÑ API ÏûÖÎãàÎã§.
 * @summary Ïù¥Ïö©Í∂å Ïã†Í∑ú ÌöåÏõê ÏñëÎèÑ API
 */
export const postUserTicketAssignNewMember = (
    assignToNewMemberReqDto: AssignToNewMemberReqDto,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageObject>(
      {url: `/api/v1/user/ticket/assign/new-member`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: assignToNewMemberReqDto, signal
    },
      );
    }
  


export const getPostUserTicketAssignNewMemberMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserTicketAssignNewMember>>, TError,{data: AssignToNewMemberReqDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postUserTicketAssignNewMember>>, TError,{data: AssignToNewMemberReqDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserTicketAssignNewMember>>, {data: AssignToNewMemberReqDto}> = (props) => {
          const {data} = props ?? {};

          return  postUserTicketAssignNewMember(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserTicketAssignNewMemberMutationResult = NonNullable<Awaited<ReturnType<typeof postUserTicketAssignNewMember>>>
    export type PostUserTicketAssignNewMemberMutationBody = AssignToNewMemberReqDto
    export type PostUserTicketAssignNewMemberMutationError = unknown

    /**
 * @summary Ïù¥Ïö©Í∂å Ïã†Í∑ú ÌöåÏõê ÏñëÎèÑ API
 */
export const usePostUserTicketAssignNewMember = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserTicketAssignNewMember>>, TError,{data: AssignToNewMemberReqDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postUserTicketAssignNewMember>>,
        TError,
        {data: AssignToNewMemberReqDto},
        TContext
      > => {

      const mutationOptions = getPostUserTicketAssignNewMemberMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Ï†ÑÏ≤¥ Ïù¥Ïö©Í∂å Î¶¨Ïä§Ìä∏ Ï°∞Ìöå API ÏûÖÎãàÎã§.
 * @summary Ï†ÑÏ≤¥ Ïù¥Ïö©Í∂å Î¶¨Ïä§Ìä∏ Ï°∞Ìöå API
 */
export const getUserTickets = (
    params: GetUserTicketsParams,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageListTicketListResDto>(
      {url: `/api/v1/user/tickets`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUserTicketsQueryKey = (params: GetUserTicketsParams,) => {
    return [`/api/v1/user/tickets`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserTicketsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserTickets>>, GetUserTicketsParams['page']>, TError = unknown>(params: GetUserTicketsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserTickets>>, TError, TData, Awaited<ReturnType<typeof getUserTickets>>, QueryKey, GetUserTicketsParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserTicketsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserTickets>>, QueryKey, GetUserTicketsParams['page']> = ({ signal, pageParam }) => getUserTickets({...params, page: pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserTickets>>, TError, TData, Awaited<ReturnType<typeof getUserTickets>>, QueryKey, GetUserTicketsParams['page']> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserTicketsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserTickets>>>
export type GetUserTicketsInfiniteQueryError = unknown


export function useGetUserTicketsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserTickets>>, GetUserTicketsParams['page']>, TError = unknown>(
 params: GetUserTicketsParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserTickets>>, TError, TData, Awaited<ReturnType<typeof getUserTickets>>, QueryKey, GetUserTicketsParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserTickets>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserTicketsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserTickets>>, GetUserTicketsParams['page']>, TError = unknown>(
 params: GetUserTicketsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserTickets>>, TError, TData, Awaited<ReturnType<typeof getUserTickets>>, QueryKey, GetUserTicketsParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserTickets>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserTicketsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserTickets>>, GetUserTicketsParams['page']>, TError = unknown>(
 params: GetUserTicketsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserTickets>>, TError, TData, Awaited<ReturnType<typeof getUserTickets>>, QueryKey, GetUserTicketsParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ï†ÑÏ≤¥ Ïù¥Ïö©Í∂å Î¶¨Ïä§Ìä∏ Ï°∞Ìöå API
 */

export function useGetUserTicketsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserTickets>>, GetUserTicketsParams['page']>, TError = unknown>(
 params: GetUserTicketsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserTickets>>, TError, TData, Awaited<ReturnType<typeof getUserTickets>>, QueryKey, GetUserTicketsParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserTicketsInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserTicketsQueryOptions = <TData = Awaited<ReturnType<typeof getUserTickets>>, TError = unknown>(params: GetUserTicketsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserTickets>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserTicketsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserTickets>>> = ({ signal }) => getUserTickets(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserTickets>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserTicketsQueryResult = NonNullable<Awaited<ReturnType<typeof getUserTickets>>>
export type GetUserTicketsQueryError = unknown


export function useGetUserTickets<TData = Awaited<ReturnType<typeof getUserTickets>>, TError = unknown>(
 params: GetUserTicketsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserTickets>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserTickets>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserTickets<TData = Awaited<ReturnType<typeof getUserTickets>>, TError = unknown>(
 params: GetUserTicketsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserTickets>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserTickets>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserTickets<TData = Awaited<ReturnType<typeof getUserTickets>>, TError = unknown>(
 params: GetUserTicketsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserTickets>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ï†ÑÏ≤¥ Ïù¥Ïö©Í∂å Î¶¨Ïä§Ìä∏ Ï°∞Ìöå API
 */

export function useGetUserTickets<TData = Awaited<ReturnType<typeof getUserTickets>>, TError = unknown>(
 params: GetUserTicketsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserTickets>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserTicketsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Ïù¥Ïö©Í∂å ÏÉÅÏÑ∏ Ï°∞Ìöå API ÏûÖÎãàÎã§.
 * @summary Ïù¥Ïö©Í∂å ÏÉÅÏÑ∏ Ï°∞Ìöå API
 */
export const getUserTicketTicketId = (
    ticketId: string,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageTicketDetailResDto>(
      {url: `/api/v1/user/ticket/${ticketId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserTicketTicketIdQueryKey = (ticketId: string,) => {
    return [`/api/v1/user/ticket/${ticketId}`] as const;
    }

    
export const getGetUserTicketTicketIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserTicketTicketId>>>, TError = unknown>(ticketId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserTicketTicketId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserTicketTicketIdQueryKey(ticketId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserTicketTicketId>>> = ({ signal }) => getUserTicketTicketId(ticketId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ticketId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserTicketTicketId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserTicketTicketIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserTicketTicketId>>>
export type GetUserTicketTicketIdInfiniteQueryError = unknown


export function useGetUserTicketTicketIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserTicketTicketId>>>, TError = unknown>(
 ticketId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserTicketTicketId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserTicketTicketId>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserTicketTicketIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserTicketTicketId>>>, TError = unknown>(
 ticketId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserTicketTicketId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserTicketTicketId>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserTicketTicketIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserTicketTicketId>>>, TError = unknown>(
 ticketId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserTicketTicketId>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ïù¥Ïö©Í∂å ÏÉÅÏÑ∏ Ï°∞Ìöå API
 */

export function useGetUserTicketTicketIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserTicketTicketId>>>, TError = unknown>(
 ticketId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserTicketTicketId>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserTicketTicketIdInfiniteQueryOptions(ticketId,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserTicketTicketIdQueryOptions = <TData = Awaited<ReturnType<typeof getUserTicketTicketId>>, TError = unknown>(ticketId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserTicketTicketId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserTicketTicketIdQueryKey(ticketId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserTicketTicketId>>> = ({ signal }) => getUserTicketTicketId(ticketId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(ticketId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserTicketTicketId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserTicketTicketIdQueryResult = NonNullable<Awaited<ReturnType<typeof getUserTicketTicketId>>>
export type GetUserTicketTicketIdQueryError = unknown


export function useGetUserTicketTicketId<TData = Awaited<ReturnType<typeof getUserTicketTicketId>>, TError = unknown>(
 ticketId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserTicketTicketId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserTicketTicketId>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserTicketTicketId<TData = Awaited<ReturnType<typeof getUserTicketTicketId>>, TError = unknown>(
 ticketId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserTicketTicketId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserTicketTicketId>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserTicketTicketId<TData = Awaited<ReturnType<typeof getUserTicketTicketId>>, TError = unknown>(
 ticketId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserTicketTicketId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ïù¥Ïö©Í∂å ÏÉÅÏÑ∏ Ï°∞Ìöå API
 */

export function useGetUserTicketTicketId<TData = Awaited<ReturnType<typeof getUserTicketTicketId>>, TError = unknown>(
 ticketId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserTicketTicketId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserTicketTicketIdQueryOptions(ticketId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Ïù¥Ïö©Í∂å ÌôòÎ∂à Ï†ïÎ≥¥ Ï°∞Ìöå API ÏûÖÎãàÎã§.
 * @summary Ïù¥Ïö©Í∂å ÌôòÎ∂à Ï†ïÎ≥¥ Ï°∞Ìöå API
 */
export const getUserTicketRefundInfo = (
    params: GetUserTicketRefundInfoParams,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageRefundInfoResDto>(
      {url: `/api/v1/user/ticket/refund-info`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUserTicketRefundInfoQueryKey = (params: GetUserTicketRefundInfoParams,) => {
    return [`/api/v1/user/ticket/refund-info`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserTicketRefundInfoInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserTicketRefundInfo>>, GetUserTicketRefundInfoParams['page']>, TError = unknown>(params: GetUserTicketRefundInfoParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserTicketRefundInfo>>, TError, TData, Awaited<ReturnType<typeof getUserTicketRefundInfo>>, QueryKey, GetUserTicketRefundInfoParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserTicketRefundInfoQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserTicketRefundInfo>>, QueryKey, GetUserTicketRefundInfoParams['page']> = ({ signal, pageParam }) => getUserTicketRefundInfo({...params, page: pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserTicketRefundInfo>>, TError, TData, Awaited<ReturnType<typeof getUserTicketRefundInfo>>, QueryKey, GetUserTicketRefundInfoParams['page']> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserTicketRefundInfoInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserTicketRefundInfo>>>
export type GetUserTicketRefundInfoInfiniteQueryError = unknown


export function useGetUserTicketRefundInfoInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserTicketRefundInfo>>, GetUserTicketRefundInfoParams['page']>, TError = unknown>(
 params: GetUserTicketRefundInfoParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserTicketRefundInfo>>, TError, TData, Awaited<ReturnType<typeof getUserTicketRefundInfo>>, QueryKey, GetUserTicketRefundInfoParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserTicketRefundInfo>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserTicketRefundInfoInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserTicketRefundInfo>>, GetUserTicketRefundInfoParams['page']>, TError = unknown>(
 params: GetUserTicketRefundInfoParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserTicketRefundInfo>>, TError, TData, Awaited<ReturnType<typeof getUserTicketRefundInfo>>, QueryKey, GetUserTicketRefundInfoParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserTicketRefundInfo>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserTicketRefundInfoInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserTicketRefundInfo>>, GetUserTicketRefundInfoParams['page']>, TError = unknown>(
 params: GetUserTicketRefundInfoParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserTicketRefundInfo>>, TError, TData, Awaited<ReturnType<typeof getUserTicketRefundInfo>>, QueryKey, GetUserTicketRefundInfoParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ïù¥Ïö©Í∂å ÌôòÎ∂à Ï†ïÎ≥¥ Ï°∞Ìöå API
 */

export function useGetUserTicketRefundInfoInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserTicketRefundInfo>>, GetUserTicketRefundInfoParams['page']>, TError = unknown>(
 params: GetUserTicketRefundInfoParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserTicketRefundInfo>>, TError, TData, Awaited<ReturnType<typeof getUserTicketRefundInfo>>, QueryKey, GetUserTicketRefundInfoParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserTicketRefundInfoInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserTicketRefundInfoQueryOptions = <TData = Awaited<ReturnType<typeof getUserTicketRefundInfo>>, TError = unknown>(params: GetUserTicketRefundInfoParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserTicketRefundInfo>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserTicketRefundInfoQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserTicketRefundInfo>>> = ({ signal }) => getUserTicketRefundInfo(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserTicketRefundInfo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserTicketRefundInfoQueryResult = NonNullable<Awaited<ReturnType<typeof getUserTicketRefundInfo>>>
export type GetUserTicketRefundInfoQueryError = unknown


export function useGetUserTicketRefundInfo<TData = Awaited<ReturnType<typeof getUserTicketRefundInfo>>, TError = unknown>(
 params: GetUserTicketRefundInfoParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserTicketRefundInfo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserTicketRefundInfo>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserTicketRefundInfo<TData = Awaited<ReturnType<typeof getUserTicketRefundInfo>>, TError = unknown>(
 params: GetUserTicketRefundInfoParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserTicketRefundInfo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserTicketRefundInfo>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserTicketRefundInfo<TData = Awaited<ReturnType<typeof getUserTicketRefundInfo>>, TError = unknown>(
 params: GetUserTicketRefundInfoParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserTicketRefundInfo>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ïù¥Ïö©Í∂å ÌôòÎ∂à Ï†ïÎ≥¥ Ï°∞Ìöå API
 */

export function useGetUserTicketRefundInfo<TData = Awaited<ReturnType<typeof getUserTicketRefundInfo>>, TError = unknown>(
 params: GetUserTicketRefundInfoParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserTicketRefundInfo>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserTicketRefundInfoQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Ïù¥Ïö©Í∂å ÏñëÎèÑ Ï†ïÎ≥¥ Ï°∞Ìöå API ÏûÖÎãàÎã§.
 * @summary Ïù¥Ïö©Í∂å ÏñëÎèÑ Ï†ïÎ≥¥ Ï°∞Ìöå API
 */
export const getUserTicketAssignInfo = (
    params: GetUserTicketAssignInfoParams,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageAssignToInfoResDto>(
      {url: `/api/v1/user/ticket/assign-info`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUserTicketAssignInfoQueryKey = (params: GetUserTicketAssignInfoParams,) => {
    return [`/api/v1/user/ticket/assign-info`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserTicketAssignInfoInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserTicketAssignInfo>>, GetUserTicketAssignInfoParams['page']>, TError = unknown>(params: GetUserTicketAssignInfoParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserTicketAssignInfo>>, TError, TData, Awaited<ReturnType<typeof getUserTicketAssignInfo>>, QueryKey, GetUserTicketAssignInfoParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserTicketAssignInfoQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserTicketAssignInfo>>, QueryKey, GetUserTicketAssignInfoParams['page']> = ({ signal, pageParam }) => getUserTicketAssignInfo({...params, page: pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserTicketAssignInfo>>, TError, TData, Awaited<ReturnType<typeof getUserTicketAssignInfo>>, QueryKey, GetUserTicketAssignInfoParams['page']> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserTicketAssignInfoInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserTicketAssignInfo>>>
export type GetUserTicketAssignInfoInfiniteQueryError = unknown


export function useGetUserTicketAssignInfoInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserTicketAssignInfo>>, GetUserTicketAssignInfoParams['page']>, TError = unknown>(
 params: GetUserTicketAssignInfoParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserTicketAssignInfo>>, TError, TData, Awaited<ReturnType<typeof getUserTicketAssignInfo>>, QueryKey, GetUserTicketAssignInfoParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserTicketAssignInfo>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserTicketAssignInfoInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserTicketAssignInfo>>, GetUserTicketAssignInfoParams['page']>, TError = unknown>(
 params: GetUserTicketAssignInfoParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserTicketAssignInfo>>, TError, TData, Awaited<ReturnType<typeof getUserTicketAssignInfo>>, QueryKey, GetUserTicketAssignInfoParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserTicketAssignInfo>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserTicketAssignInfoInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserTicketAssignInfo>>, GetUserTicketAssignInfoParams['page']>, TError = unknown>(
 params: GetUserTicketAssignInfoParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserTicketAssignInfo>>, TError, TData, Awaited<ReturnType<typeof getUserTicketAssignInfo>>, QueryKey, GetUserTicketAssignInfoParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ïù¥Ïö©Í∂å ÏñëÎèÑ Ï†ïÎ≥¥ Ï°∞Ìöå API
 */

export function useGetUserTicketAssignInfoInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserTicketAssignInfo>>, GetUserTicketAssignInfoParams['page']>, TError = unknown>(
 params: GetUserTicketAssignInfoParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserTicketAssignInfo>>, TError, TData, Awaited<ReturnType<typeof getUserTicketAssignInfo>>, QueryKey, GetUserTicketAssignInfoParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserTicketAssignInfoInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserTicketAssignInfoQueryOptions = <TData = Awaited<ReturnType<typeof getUserTicketAssignInfo>>, TError = unknown>(params: GetUserTicketAssignInfoParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserTicketAssignInfo>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserTicketAssignInfoQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserTicketAssignInfo>>> = ({ signal }) => getUserTicketAssignInfo(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserTicketAssignInfo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserTicketAssignInfoQueryResult = NonNullable<Awaited<ReturnType<typeof getUserTicketAssignInfo>>>
export type GetUserTicketAssignInfoQueryError = unknown


export function useGetUserTicketAssignInfo<TData = Awaited<ReturnType<typeof getUserTicketAssignInfo>>, TError = unknown>(
 params: GetUserTicketAssignInfoParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserTicketAssignInfo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserTicketAssignInfo>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserTicketAssignInfo<TData = Awaited<ReturnType<typeof getUserTicketAssignInfo>>, TError = unknown>(
 params: GetUserTicketAssignInfoParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserTicketAssignInfo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserTicketAssignInfo>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserTicketAssignInfo<TData = Awaited<ReturnType<typeof getUserTicketAssignInfo>>, TError = unknown>(
 params: GetUserTicketAssignInfoParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserTicketAssignInfo>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ïù¥Ïö©Í∂å ÏñëÎèÑ Ï†ïÎ≥¥ Ï°∞Ìöå API
 */

export function useGetUserTicketAssignInfo<TData = Awaited<ReturnType<typeof getUserTicketAssignInfo>>, TError = unknown>(
 params: GetUserTicketAssignInfoParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserTicketAssignInfo>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserTicketAssignInfoQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



