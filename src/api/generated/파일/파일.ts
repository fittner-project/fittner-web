/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Fittner API
 * Fittner API with Spring Boot
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  UploadImage200,
  UploadImageParams
} from '.././models'
import { axiosInstance } from '../../mutator/instance-wrapper';



/**
 * Ïù¥ÎØ∏ÏßÄÎ•º ÏóÖÎ°úÎìú Ìï©ÎãàÎã§.
 * @summary Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú
 */
export const uploadImage = (
    params: UploadImageParams,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<UploadImage200>(
      {url: `/api/v1/common/file/upload`, method: 'POST',
        params, signal
    },
      );
    }
  


export const getUploadImageMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadImage>>, TError,{params: UploadImageParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof uploadImage>>, TError,{params: UploadImageParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof uploadImage>>, {params: UploadImageParams}> = (props) => {
          const {params} = props ?? {};

          return  uploadImage(params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UploadImageMutationResult = NonNullable<Awaited<ReturnType<typeof uploadImage>>>
    
    export type UploadImageMutationError = unknown

    /**
 * @summary Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú
 */
export const useUploadImage = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadImage>>, TError,{params: UploadImageParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof uploadImage>>,
        TError,
        {params: UploadImageParams},
        TContext
      > => {

      const mutationOptions = getUploadImageMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * url ÏûÖÎ†•Ïãú Ìï¥Îãπ Ïù¥ÎØ∏ÏßÄÎ•º ÎÖ∏Ï∂úÌï©ÎãàÎã§.
 * @summary Ïù¥ÎØ∏ÏßÄ Ïó¥Í∏∞
 */
export const showImage = (
    fileId: string,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<string[]>(
      {url: `/api/v1/common/file/show/${fileId}`, method: 'GET', signal
    },
      );
    }
  

export const getShowImageQueryKey = (fileId: string,) => {
    return [`/api/v1/common/file/show/${fileId}`] as const;
    }

    
export const getShowImageInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof showImage>>>, TError = unknown>(fileId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof showImage>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getShowImageQueryKey(fileId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof showImage>>> = ({ signal }) => showImage(fileId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(fileId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof showImage>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type ShowImageInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof showImage>>>
export type ShowImageInfiniteQueryError = unknown


export function useShowImageInfinite<TData = InfiniteData<Awaited<ReturnType<typeof showImage>>>, TError = unknown>(
 fileId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof showImage>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof showImage>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useShowImageInfinite<TData = InfiniteData<Awaited<ReturnType<typeof showImage>>>, TError = unknown>(
 fileId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof showImage>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof showImage>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useShowImageInfinite<TData = InfiniteData<Awaited<ReturnType<typeof showImage>>>, TError = unknown>(
 fileId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof showImage>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ïù¥ÎØ∏ÏßÄ Ïó¥Í∏∞
 */

export function useShowImageInfinite<TData = InfiniteData<Awaited<ReturnType<typeof showImage>>>, TError = unknown>(
 fileId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof showImage>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getShowImageInfiniteQueryOptions(fileId,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getShowImageQueryOptions = <TData = Awaited<ReturnType<typeof showImage>>, TError = unknown>(fileId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof showImage>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getShowImageQueryKey(fileId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof showImage>>> = ({ signal }) => showImage(fileId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(fileId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof showImage>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type ShowImageQueryResult = NonNullable<Awaited<ReturnType<typeof showImage>>>
export type ShowImageQueryError = unknown


export function useShowImage<TData = Awaited<ReturnType<typeof showImage>>, TError = unknown>(
 fileId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof showImage>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof showImage>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useShowImage<TData = Awaited<ReturnType<typeof showImage>>, TError = unknown>(
 fileId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof showImage>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof showImage>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useShowImage<TData = Awaited<ReturnType<typeof showImage>>, TError = unknown>(
 fileId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof showImage>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ïù¥ÎØ∏ÏßÄ Ïó¥Í∏∞
 */

export function useShowImage<TData = Awaited<ReturnType<typeof showImage>>, TError = unknown>(
 fileId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof showImage>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getShowImageQueryOptions(fileId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ÌòÑÏû¨ Ï†ÅÏö©Ï§ëÏù∏ Í∞úÏù∏Ï†ïÎ≥¥ Ïù¥Ïö©ÏïΩÍ¥ÄÏùÑ Ï°∞Ìöå Ìï©ÎãàÎã§.
 * @summary Í∞úÏù∏Ï†ïÎ≥¥ Ïù¥Ïö©ÏïΩÍ¥Ä
 */
export const getPrivacyClause = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<string[]>(
      {url: `/api/v1/common/file/privacy-clause`, method: 'GET', signal
    },
      );
    }
  

export const getGetPrivacyClauseQueryKey = () => {
    return [`/api/v1/common/file/privacy-clause`] as const;
    }

    
export const getGetPrivacyClauseInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getPrivacyClause>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPrivacyClause>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPrivacyClauseQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPrivacyClause>>> = ({ signal }) => getPrivacyClause(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPrivacyClause>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPrivacyClauseInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getPrivacyClause>>>
export type GetPrivacyClauseInfiniteQueryError = unknown


export function useGetPrivacyClauseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getPrivacyClause>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPrivacyClause>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPrivacyClause>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPrivacyClauseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getPrivacyClause>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPrivacyClause>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPrivacyClause>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPrivacyClauseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getPrivacyClause>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPrivacyClause>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Í∞úÏù∏Ï†ïÎ≥¥ Ïù¥Ïö©ÏïΩÍ¥Ä
 */

export function useGetPrivacyClauseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getPrivacyClause>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPrivacyClause>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPrivacyClauseInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetPrivacyClauseQueryOptions = <TData = Awaited<ReturnType<typeof getPrivacyClause>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPrivacyClause>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPrivacyClauseQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPrivacyClause>>> = ({ signal }) => getPrivacyClause(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPrivacyClause>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPrivacyClauseQueryResult = NonNullable<Awaited<ReturnType<typeof getPrivacyClause>>>
export type GetPrivacyClauseQueryError = unknown


export function useGetPrivacyClause<TData = Awaited<ReturnType<typeof getPrivacyClause>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPrivacyClause>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPrivacyClause>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPrivacyClause<TData = Awaited<ReturnType<typeof getPrivacyClause>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPrivacyClause>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPrivacyClause>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPrivacyClause<TData = Awaited<ReturnType<typeof getPrivacyClause>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPrivacyClause>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Í∞úÏù∏Ï†ïÎ≥¥ Ïù¥Ïö©ÏïΩÍ¥Ä
 */

export function useGetPrivacyClause<TData = Awaited<ReturnType<typeof getPrivacyClause>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPrivacyClause>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPrivacyClauseQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



