/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Fittner API
 * Fittner API with Spring Boot
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  PostCommonFileUpload200,
  PostCommonFileUploadParams
} from '.././models'
import { axiosInstance } from '../../mutator/instance-wrapper';



/**
 * Ïù¥ÎØ∏ÏßÄÎ•º ÏóÖÎ°úÎìú Ìï©ÎãàÎã§.
 * @summary Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú
 */
export const postCommonFileUpload = (
    params: PostCommonFileUploadParams,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<PostCommonFileUpload200>(
      {url: `/api/v1/common/file/upload`, method: 'POST',
        params, signal
    },
      );
    }
  


export const getPostCommonFileUploadMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCommonFileUpload>>, TError,{params: PostCommonFileUploadParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postCommonFileUpload>>, TError,{params: PostCommonFileUploadParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCommonFileUpload>>, {params: PostCommonFileUploadParams}> = (props) => {
          const {params} = props ?? {};

          return  postCommonFileUpload(params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostCommonFileUploadMutationResult = NonNullable<Awaited<ReturnType<typeof postCommonFileUpload>>>
    
    export type PostCommonFileUploadMutationError = unknown

    /**
 * @summary Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú
 */
export const usePostCommonFileUpload = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCommonFileUpload>>, TError,{params: PostCommonFileUploadParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postCommonFileUpload>>,
        TError,
        {params: PostCommonFileUploadParams},
        TContext
      > => {

      const mutationOptions = getPostCommonFileUploadMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * url ÏûÖÎ†•Ïãú Ìï¥Îãπ Ïù¥ÎØ∏ÏßÄÎ•º ÎÖ∏Ï∂úÌï©ÎãàÎã§.
 * @summary Ïù¥ÎØ∏ÏßÄ Ïó¥Í∏∞
 */
export const getCommonFileShowFileId = (
    fileId: string,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<string[]>(
      {url: `/api/v1/common/file/show/${fileId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetCommonFileShowFileIdQueryKey = (fileId: string,) => {
    return [`/api/v1/common/file/show/${fileId}`] as const;
    }

    
export const getGetCommonFileShowFileIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getCommonFileShowFileId>>>, TError = unknown>(fileId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCommonFileShowFileId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCommonFileShowFileIdQueryKey(fileId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCommonFileShowFileId>>> = ({ signal }) => getCommonFileShowFileId(fileId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(fileId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCommonFileShowFileId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetCommonFileShowFileIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getCommonFileShowFileId>>>
export type GetCommonFileShowFileIdInfiniteQueryError = unknown


export function useGetCommonFileShowFileIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getCommonFileShowFileId>>>, TError = unknown>(
 fileId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCommonFileShowFileId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommonFileShowFileId>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCommonFileShowFileIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getCommonFileShowFileId>>>, TError = unknown>(
 fileId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCommonFileShowFileId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommonFileShowFileId>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCommonFileShowFileIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getCommonFileShowFileId>>>, TError = unknown>(
 fileId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCommonFileShowFileId>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ïù¥ÎØ∏ÏßÄ Ïó¥Í∏∞
 */

export function useGetCommonFileShowFileIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getCommonFileShowFileId>>>, TError = unknown>(
 fileId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCommonFileShowFileId>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetCommonFileShowFileIdInfiniteQueryOptions(fileId,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetCommonFileShowFileIdQueryOptions = <TData = Awaited<ReturnType<typeof getCommonFileShowFileId>>, TError = unknown>(fileId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonFileShowFileId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCommonFileShowFileIdQueryKey(fileId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCommonFileShowFileId>>> = ({ signal }) => getCommonFileShowFileId(fileId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(fileId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCommonFileShowFileId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetCommonFileShowFileIdQueryResult = NonNullable<Awaited<ReturnType<typeof getCommonFileShowFileId>>>
export type GetCommonFileShowFileIdQueryError = unknown


export function useGetCommonFileShowFileId<TData = Awaited<ReturnType<typeof getCommonFileShowFileId>>, TError = unknown>(
 fileId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonFileShowFileId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommonFileShowFileId>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCommonFileShowFileId<TData = Awaited<ReturnType<typeof getCommonFileShowFileId>>, TError = unknown>(
 fileId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonFileShowFileId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommonFileShowFileId>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCommonFileShowFileId<TData = Awaited<ReturnType<typeof getCommonFileShowFileId>>, TError = unknown>(
 fileId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonFileShowFileId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ïù¥ÎØ∏ÏßÄ Ïó¥Í∏∞
 */

export function useGetCommonFileShowFileId<TData = Awaited<ReturnType<typeof getCommonFileShowFileId>>, TError = unknown>(
 fileId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonFileShowFileId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetCommonFileShowFileIdQueryOptions(fileId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ÌòÑÏû¨ Ï†ÅÏö©Ï§ëÏù∏ Í∞úÏù∏Ï†ïÎ≥¥ Ïù¥Ïö©ÏïΩÍ¥ÄÏùÑ Ï°∞Ìöå Ìï©ÎãàÎã§.
 * @summary Í∞úÏù∏Ï†ïÎ≥¥ Ïù¥Ïö©ÏïΩÍ¥Ä
 */
export const getCommonFilePrivacyClause = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<string[]>(
      {url: `/api/v1/common/file/privacy-clause`, method: 'GET', signal
    },
      );
    }
  

export const getGetCommonFilePrivacyClauseQueryKey = () => {
    return [`/api/v1/common/file/privacy-clause`] as const;
    }

    
export const getGetCommonFilePrivacyClauseInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getCommonFilePrivacyClause>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCommonFilePrivacyClause>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCommonFilePrivacyClauseQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCommonFilePrivacyClause>>> = ({ signal }) => getCommonFilePrivacyClause(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCommonFilePrivacyClause>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetCommonFilePrivacyClauseInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getCommonFilePrivacyClause>>>
export type GetCommonFilePrivacyClauseInfiniteQueryError = unknown


export function useGetCommonFilePrivacyClauseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getCommonFilePrivacyClause>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCommonFilePrivacyClause>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommonFilePrivacyClause>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCommonFilePrivacyClauseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getCommonFilePrivacyClause>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCommonFilePrivacyClause>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommonFilePrivacyClause>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCommonFilePrivacyClauseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getCommonFilePrivacyClause>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCommonFilePrivacyClause>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Í∞úÏù∏Ï†ïÎ≥¥ Ïù¥Ïö©ÏïΩÍ¥Ä
 */

export function useGetCommonFilePrivacyClauseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getCommonFilePrivacyClause>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCommonFilePrivacyClause>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetCommonFilePrivacyClauseInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetCommonFilePrivacyClauseQueryOptions = <TData = Awaited<ReturnType<typeof getCommonFilePrivacyClause>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonFilePrivacyClause>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCommonFilePrivacyClauseQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCommonFilePrivacyClause>>> = ({ signal }) => getCommonFilePrivacyClause(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCommonFilePrivacyClause>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetCommonFilePrivacyClauseQueryResult = NonNullable<Awaited<ReturnType<typeof getCommonFilePrivacyClause>>>
export type GetCommonFilePrivacyClauseQueryError = unknown


export function useGetCommonFilePrivacyClause<TData = Awaited<ReturnType<typeof getCommonFilePrivacyClause>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonFilePrivacyClause>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommonFilePrivacyClause>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCommonFilePrivacyClause<TData = Awaited<ReturnType<typeof getCommonFilePrivacyClause>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonFilePrivacyClause>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommonFilePrivacyClause>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCommonFilePrivacyClause<TData = Awaited<ReturnType<typeof getCommonFilePrivacyClause>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonFilePrivacyClause>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Í∞úÏù∏Ï†ïÎ≥¥ Ïù¥Ïö©ÏïΩÍ¥Ä
 */

export function useGetCommonFilePrivacyClause<TData = Awaited<ReturnType<typeof getCommonFilePrivacyClause>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCommonFilePrivacyClause>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetCommonFilePrivacyClauseQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



