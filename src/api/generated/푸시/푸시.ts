/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Fittner API
 * Fittner API with Spring Boot
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  ApiResponseMessagePushChkResDto
} from '.././models'
import { customInstance } from '../../mutator/custom-instance';



/**
 * 신규 알림이 있는지(안읽은 알림) 확인하는 API 입니다.
 * @summary 신규 알림 여부 조회 API
 */
export const pushChk = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<ApiResponseMessagePushChkResDto>(
      {url: `/api/v1/user/push/chk`, method: 'GET', signal
    },
      );
    }
  

export const getPushChkQueryKey = () => {
    return [`/api/v1/user/push/chk`] as const;
    }

    
export const getPushChkInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof pushChk>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pushChk>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPushChkQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pushChk>>> = ({ signal }) => pushChk(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof pushChk>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type PushChkInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof pushChk>>>
export type PushChkInfiniteQueryError = unknown


export function usePushChkInfinite<TData = InfiniteData<Awaited<ReturnType<typeof pushChk>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pushChk>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof pushChk>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function usePushChkInfinite<TData = InfiniteData<Awaited<ReturnType<typeof pushChk>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pushChk>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof pushChk>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function usePushChkInfinite<TData = InfiniteData<Awaited<ReturnType<typeof pushChk>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pushChk>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary 신규 알림 여부 조회 API
 */

export function usePushChkInfinite<TData = InfiniteData<Awaited<ReturnType<typeof pushChk>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pushChk>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getPushChkInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getPushChkQueryOptions = <TData = Awaited<ReturnType<typeof pushChk>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof pushChk>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPushChkQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pushChk>>> = ({ signal }) => pushChk(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof pushChk>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type PushChkQueryResult = NonNullable<Awaited<ReturnType<typeof pushChk>>>
export type PushChkQueryError = unknown


export function usePushChk<TData = Awaited<ReturnType<typeof pushChk>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof pushChk>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof pushChk>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function usePushChk<TData = Awaited<ReturnType<typeof pushChk>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof pushChk>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof pushChk>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function usePushChk<TData = Awaited<ReturnType<typeof pushChk>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof pushChk>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary 신규 알림 여부 조회 API
 */

export function usePushChk<TData = Awaited<ReturnType<typeof pushChk>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof pushChk>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getPushChkQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



