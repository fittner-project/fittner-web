/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Fittner API
 * Fittner API with Spring Boot
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  ApiResponseMessageListPushResDto,
  ApiResponseMessageObject,
  ApiResponseMessagePushChkResDto,
  GetUserPushChkParams,
  GetUserPushsParams,
  PushReadReqDto
} from '.././models'
import { axiosInstance } from '../../mutator/instance-wrapper';



/**
 * ÏïåÎ¶º ÏùΩÏùå API ÏûÖÎãàÎã§.
 * @summary ÏïåÎ¶º ÏùΩÏùå API
 */
export const postUserPushRead = (
    pushReadReqDto: PushReadReqDto,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageObject>(
      {url: `/api/v1/user/push/read`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: pushReadReqDto, signal
    },
      );
    }
  


export const getPostUserPushReadMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserPushRead>>, TError,{data: PushReadReqDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postUserPushRead>>, TError,{data: PushReadReqDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserPushRead>>, {data: PushReadReqDto}> = (props) => {
          const {data} = props ?? {};

          return  postUserPushRead(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserPushReadMutationResult = NonNullable<Awaited<ReturnType<typeof postUserPushRead>>>
    export type PostUserPushReadMutationBody = PushReadReqDto
    export type PostUserPushReadMutationError = unknown

    /**
 * @summary ÏïåÎ¶º ÏùΩÏùå API
 */
export const usePostUserPushRead = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserPushRead>>, TError,{data: PushReadReqDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postUserPushRead>>,
        TError,
        {data: PushReadReqDto},
        TContext
      > => {

      const mutationOptions = getPostUserPushReadMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * ÏïåÎ¶º Î¶¨Ïä§Ìä∏ Ï°∞Ìöå API ÏûÖÎãàÎã§.
 * @summary ÏïåÎ¶º Î¶¨Ïä§Ìä∏ Ï°∞Ìöå API
 */
export const getUserPushs = (
    params: GetUserPushsParams,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageListPushResDto>(
      {url: `/api/v1/user/pushs`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUserPushsQueryKey = (params: GetUserPushsParams,) => {
    return [`/api/v1/user/pushs`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserPushsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserPushs>>, GetUserPushsParams['page']>, TError = unknown>(params: GetUserPushsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserPushs>>, TError, TData, Awaited<ReturnType<typeof getUserPushs>>, QueryKey, GetUserPushsParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserPushsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserPushs>>, QueryKey, GetUserPushsParams['page']> = ({ signal, pageParam }) => getUserPushs({...params, page: pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserPushs>>, TError, TData, Awaited<ReturnType<typeof getUserPushs>>, QueryKey, GetUserPushsParams['page']> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserPushsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserPushs>>>
export type GetUserPushsInfiniteQueryError = unknown


export function useGetUserPushsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserPushs>>, GetUserPushsParams['page']>, TError = unknown>(
 params: GetUserPushsParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserPushs>>, TError, TData, Awaited<ReturnType<typeof getUserPushs>>, QueryKey, GetUserPushsParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserPushs>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserPushsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserPushs>>, GetUserPushsParams['page']>, TError = unknown>(
 params: GetUserPushsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserPushs>>, TError, TData, Awaited<ReturnType<typeof getUserPushs>>, QueryKey, GetUserPushsParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserPushs>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserPushsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserPushs>>, GetUserPushsParams['page']>, TError = unknown>(
 params: GetUserPushsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserPushs>>, TError, TData, Awaited<ReturnType<typeof getUserPushs>>, QueryKey, GetUserPushsParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÏïåÎ¶º Î¶¨Ïä§Ìä∏ Ï°∞Ìöå API
 */

export function useGetUserPushsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserPushs>>, GetUserPushsParams['page']>, TError = unknown>(
 params: GetUserPushsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserPushs>>, TError, TData, Awaited<ReturnType<typeof getUserPushs>>, QueryKey, GetUserPushsParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserPushsInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserPushsQueryOptions = <TData = Awaited<ReturnType<typeof getUserPushs>>, TError = unknown>(params: GetUserPushsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserPushs>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserPushsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserPushs>>> = ({ signal }) => getUserPushs(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserPushs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserPushsQueryResult = NonNullable<Awaited<ReturnType<typeof getUserPushs>>>
export type GetUserPushsQueryError = unknown


export function useGetUserPushs<TData = Awaited<ReturnType<typeof getUserPushs>>, TError = unknown>(
 params: GetUserPushsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserPushs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserPushs>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserPushs<TData = Awaited<ReturnType<typeof getUserPushs>>, TError = unknown>(
 params: GetUserPushsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserPushs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserPushs>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserPushs<TData = Awaited<ReturnType<typeof getUserPushs>>, TError = unknown>(
 params: GetUserPushsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserPushs>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÏïåÎ¶º Î¶¨Ïä§Ìä∏ Ï°∞Ìöå API
 */

export function useGetUserPushs<TData = Awaited<ReturnType<typeof getUserPushs>>, TError = unknown>(
 params: GetUserPushsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserPushs>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserPushsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Ïã†Í∑ú ÏïåÎ¶ºÏù¥ ÏûàÎäîÏßÄ(ÏïàÏùΩÏùÄ ÏïåÎ¶º) ÌôïÏù∏ÌïòÎäî API ÏûÖÎãàÎã§.
 * @summary Ïã†Í∑ú ÏïåÎ¶º Ïó¨Î∂Ä Ï°∞Ìöå API
 */
export const getUserPushChk = (
    params: GetUserPushChkParams,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessagePushChkResDto>(
      {url: `/api/v1/user/push/chk`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUserPushChkQueryKey = (params: GetUserPushChkParams,) => {
    return [`/api/v1/user/push/chk`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserPushChkInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserPushChk>>, GetUserPushChkParams['page']>, TError = unknown>(params: GetUserPushChkParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserPushChk>>, TError, TData, Awaited<ReturnType<typeof getUserPushChk>>, QueryKey, GetUserPushChkParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserPushChkQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserPushChk>>, QueryKey, GetUserPushChkParams['page']> = ({ signal, pageParam }) => getUserPushChk({...params, page: pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserPushChk>>, TError, TData, Awaited<ReturnType<typeof getUserPushChk>>, QueryKey, GetUserPushChkParams['page']> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserPushChkInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserPushChk>>>
export type GetUserPushChkInfiniteQueryError = unknown


export function useGetUserPushChkInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserPushChk>>, GetUserPushChkParams['page']>, TError = unknown>(
 params: GetUserPushChkParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserPushChk>>, TError, TData, Awaited<ReturnType<typeof getUserPushChk>>, QueryKey, GetUserPushChkParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserPushChk>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserPushChkInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserPushChk>>, GetUserPushChkParams['page']>, TError = unknown>(
 params: GetUserPushChkParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserPushChk>>, TError, TData, Awaited<ReturnType<typeof getUserPushChk>>, QueryKey, GetUserPushChkParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserPushChk>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserPushChkInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserPushChk>>, GetUserPushChkParams['page']>, TError = unknown>(
 params: GetUserPushChkParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserPushChk>>, TError, TData, Awaited<ReturnType<typeof getUserPushChk>>, QueryKey, GetUserPushChkParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ïã†Í∑ú ÏïåÎ¶º Ïó¨Î∂Ä Ï°∞Ìöå API
 */

export function useGetUserPushChkInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserPushChk>>, GetUserPushChkParams['page']>, TError = unknown>(
 params: GetUserPushChkParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserPushChk>>, TError, TData, Awaited<ReturnType<typeof getUserPushChk>>, QueryKey, GetUserPushChkParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserPushChkInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserPushChkQueryOptions = <TData = Awaited<ReturnType<typeof getUserPushChk>>, TError = unknown>(params: GetUserPushChkParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserPushChk>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserPushChkQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserPushChk>>> = ({ signal }) => getUserPushChk(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserPushChk>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserPushChkQueryResult = NonNullable<Awaited<ReturnType<typeof getUserPushChk>>>
export type GetUserPushChkQueryError = unknown


export function useGetUserPushChk<TData = Awaited<ReturnType<typeof getUserPushChk>>, TError = unknown>(
 params: GetUserPushChkParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserPushChk>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserPushChk>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserPushChk<TData = Awaited<ReturnType<typeof getUserPushChk>>, TError = unknown>(
 params: GetUserPushChkParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserPushChk>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserPushChk>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserPushChk<TData = Awaited<ReturnType<typeof getUserPushChk>>, TError = unknown>(
 params: GetUserPushChkParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserPushChk>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ïã†Í∑ú ÏïåÎ¶º Ïó¨Î∂Ä Ï°∞Ìöå API
 */

export function useGetUserPushChk<TData = Awaited<ReturnType<typeof getUserPushChk>>, TError = unknown>(
 params: GetUserPushChkParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserPushChk>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserPushChkQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



