/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Fittner API
 * Fittner API with Spring Boot
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  ApiResponseMessageListPushResDto,
  ApiResponseMessageObject,
  ApiResponseMessagePushChkResDto,
  GetPushsParams,
  PushReadReqDto
} from '.././models'
import { axiosInstance } from '../../mutator/instance-wrapper';



/**
 * ÏïåÎ¶º ÏùΩÏùå API ÏûÖÎãàÎã§.
 * @summary ÏïåÎ¶º ÏùΩÏùå API
 */
export const pushRead = (
    pushReadReqDto: PushReadReqDto,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageObject>(
      {url: `/api/v1/user/push/read`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: pushReadReqDto, signal
    },
      );
    }
  


export const getPushReadMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof pushRead>>, TError,{data: PushReadReqDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof pushRead>>, TError,{data: PushReadReqDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof pushRead>>, {data: PushReadReqDto}> = (props) => {
          const {data} = props ?? {};

          return  pushRead(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PushReadMutationResult = NonNullable<Awaited<ReturnType<typeof pushRead>>>
    export type PushReadMutationBody = PushReadReqDto
    export type PushReadMutationError = unknown

    /**
 * @summary ÏïåÎ¶º ÏùΩÏùå API
 */
export const usePushRead = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof pushRead>>, TError,{data: PushReadReqDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof pushRead>>,
        TError,
        {data: PushReadReqDto},
        TContext
      > => {

      const mutationOptions = getPushReadMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * ÏïåÎ¶º Î¶¨Ïä§Ìä∏ Ï°∞Ìöå API ÏûÖÎãàÎã§.
 * @summary ÏïåÎ¶º Î¶¨Ïä§Ìä∏ Ï°∞Ìöå API
 */
export const getPushs = (
    params: GetPushsParams,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageListPushResDto>(
      {url: `/api/v1/user/pushs`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetPushsQueryKey = (params: GetPushsParams,) => {
    return [`/api/v1/user/pushs`, ...(params ? [params]: [])] as const;
    }

    
export const getGetPushsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getPushs>>, GetPushsParams['page']>, TError = unknown>(params: GetPushsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPushs>>, TError, TData, Awaited<ReturnType<typeof getPushs>>, QueryKey, GetPushsParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPushsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPushs>>, QueryKey, GetPushsParams['page']> = ({ signal, pageParam }) => getPushs({...params, page: pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPushs>>, TError, TData, Awaited<ReturnType<typeof getPushs>>, QueryKey, GetPushsParams['page']> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPushsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getPushs>>>
export type GetPushsInfiniteQueryError = unknown


export function useGetPushsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getPushs>>, GetPushsParams['page']>, TError = unknown>(
 params: GetPushsParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPushs>>, TError, TData, Awaited<ReturnType<typeof getPushs>>, QueryKey, GetPushsParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPushs>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPushsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getPushs>>, GetPushsParams['page']>, TError = unknown>(
 params: GetPushsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPushs>>, TError, TData, Awaited<ReturnType<typeof getPushs>>, QueryKey, GetPushsParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPushs>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPushsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getPushs>>, GetPushsParams['page']>, TError = unknown>(
 params: GetPushsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPushs>>, TError, TData, Awaited<ReturnType<typeof getPushs>>, QueryKey, GetPushsParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÏïåÎ¶º Î¶¨Ïä§Ìä∏ Ï°∞Ìöå API
 */

export function useGetPushsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getPushs>>, GetPushsParams['page']>, TError = unknown>(
 params: GetPushsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPushs>>, TError, TData, Awaited<ReturnType<typeof getPushs>>, QueryKey, GetPushsParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPushsInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetPushsQueryOptions = <TData = Awaited<ReturnType<typeof getPushs>>, TError = unknown>(params: GetPushsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPushs>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPushsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPushs>>> = ({ signal }) => getPushs(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPushs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPushsQueryResult = NonNullable<Awaited<ReturnType<typeof getPushs>>>
export type GetPushsQueryError = unknown


export function useGetPushs<TData = Awaited<ReturnType<typeof getPushs>>, TError = unknown>(
 params: GetPushsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPushs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPushs>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPushs<TData = Awaited<ReturnType<typeof getPushs>>, TError = unknown>(
 params: GetPushsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPushs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPushs>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPushs<TData = Awaited<ReturnType<typeof getPushs>>, TError = unknown>(
 params: GetPushsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPushs>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÏïåÎ¶º Î¶¨Ïä§Ìä∏ Ï°∞Ìöå API
 */

export function useGetPushs<TData = Awaited<ReturnType<typeof getPushs>>, TError = unknown>(
 params: GetPushsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPushs>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPushsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Ïã†Í∑ú ÏïåÎ¶ºÏù¥ ÏûàÎäîÏßÄ(ÏïàÏùΩÏùÄ ÏïåÎ¶º) ÌôïÏù∏ÌïòÎäî API ÏûÖÎãàÎã§.
 * @summary Ïã†Í∑ú ÏïåÎ¶º Ïó¨Î∂Ä Ï°∞Ìöå API
 */
export const pushChk = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessagePushChkResDto>(
      {url: `/api/v1/user/push/chk`, method: 'GET', signal
    },
      );
    }
  

export const getPushChkQueryKey = () => {
    return [`/api/v1/user/push/chk`] as const;
    }

    
export const getPushChkInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof pushChk>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pushChk>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPushChkQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pushChk>>> = ({ signal }) => pushChk(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof pushChk>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type PushChkInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof pushChk>>>
export type PushChkInfiniteQueryError = unknown


export function usePushChkInfinite<TData = InfiniteData<Awaited<ReturnType<typeof pushChk>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pushChk>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof pushChk>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function usePushChkInfinite<TData = InfiniteData<Awaited<ReturnType<typeof pushChk>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pushChk>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof pushChk>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function usePushChkInfinite<TData = InfiniteData<Awaited<ReturnType<typeof pushChk>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pushChk>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ïã†Í∑ú ÏïåÎ¶º Ïó¨Î∂Ä Ï°∞Ìöå API
 */

export function usePushChkInfinite<TData = InfiniteData<Awaited<ReturnType<typeof pushChk>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof pushChk>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getPushChkInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getPushChkQueryOptions = <TData = Awaited<ReturnType<typeof pushChk>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof pushChk>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPushChkQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof pushChk>>> = ({ signal }) => pushChk(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof pushChk>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type PushChkQueryResult = NonNullable<Awaited<ReturnType<typeof pushChk>>>
export type PushChkQueryError = unknown


export function usePushChk<TData = Awaited<ReturnType<typeof pushChk>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof pushChk>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof pushChk>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function usePushChk<TData = Awaited<ReturnType<typeof pushChk>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof pushChk>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof pushChk>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function usePushChk<TData = Awaited<ReturnType<typeof pushChk>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof pushChk>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ïã†Í∑ú ÏïåÎ¶º Ïó¨Î∂Ä Ï°∞Ìöå API
 */

export function usePushChk<TData = Awaited<ReturnType<typeof pushChk>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof pushChk>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getPushChkQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



