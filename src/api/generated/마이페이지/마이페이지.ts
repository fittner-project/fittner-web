/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Fittner API
 * Fittner API with Spring Boot
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  ApiResponseMessageListNoticeResDto,
  ApiResponseMessageListPushSetResDto,
  ApiResponseMessageListSalesInfoDetailResDto,
  ApiResponseMessageListSalesInfoResDto,
  ApiResponseMessageListTermsListResDto,
  ApiResponseMessageMyPageInfoResDto,
  ApiResponseMessageObject,
  ApiResponseMessageSalesResDto,
  GetUserMyPageNoticesParams,
  GetUserMyPageSalesInfoDetailParams,
  GetUserMyPageSalesInfoParams,
  GetUserMyPageSalesParams,
  NoticeReadReqDto,
  PushSetReqDto
} from '.././models'
import { axiosInstance } from '../../mutator/instance-wrapper';



/**
 * Ìë∏Ïãú ÏÑ§Ï†ï API ÏûÖÎãàÎã§.
 * @summary Ìë∏Ïãú ÏÑ§Ï†ï API
 */
export const postUserMyPagePushSet = (
    pushSetReqDto: PushSetReqDto,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageObject>(
      {url: `/api/v1/user/myPage/push-set`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: pushSetReqDto, signal
    },
      );
    }
  


export const getPostUserMyPagePushSetMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserMyPagePushSet>>, TError,{data: PushSetReqDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postUserMyPagePushSet>>, TError,{data: PushSetReqDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserMyPagePushSet>>, {data: PushSetReqDto}> = (props) => {
          const {data} = props ?? {};

          return  postUserMyPagePushSet(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserMyPagePushSetMutationResult = NonNullable<Awaited<ReturnType<typeof postUserMyPagePushSet>>>
    export type PostUserMyPagePushSetMutationBody = PushSetReqDto
    export type PostUserMyPagePushSetMutationError = unknown

    /**
 * @summary Ìë∏Ïãú ÏÑ§Ï†ï API
 */
export const usePostUserMyPagePushSet = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserMyPagePushSet>>, TError,{data: PushSetReqDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postUserMyPagePushSet>>,
        TError,
        {data: PushSetReqDto},
        TContext
      > => {

      const mutationOptions = getPostUserMyPagePushSetMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Í≥µÏßÄÏÇ¨Ìï≠ ÏùΩÏùå API ÏûÖÎãàÎã§.
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ ÏùΩÏùå API
 */
export const postUserMyPageNoticeRead = (
    noticeReadReqDto: NoticeReadReqDto,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageObject>(
      {url: `/api/v1/user/myPage/notice/read`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: noticeReadReqDto, signal
    },
      );
    }
  


export const getPostUserMyPageNoticeReadMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserMyPageNoticeRead>>, TError,{data: NoticeReadReqDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postUserMyPageNoticeRead>>, TError,{data: NoticeReadReqDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserMyPageNoticeRead>>, {data: NoticeReadReqDto}> = (props) => {
          const {data} = props ?? {};

          return  postUserMyPageNoticeRead(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserMyPageNoticeReadMutationResult = NonNullable<Awaited<ReturnType<typeof postUserMyPageNoticeRead>>>
    export type PostUserMyPageNoticeReadMutationBody = NoticeReadReqDto
    export type PostUserMyPageNoticeReadMutationError = unknown

    /**
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ ÏùΩÏùå API
 */
export const usePostUserMyPageNoticeRead = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserMyPageNoticeRead>>, TError,{data: NoticeReadReqDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postUserMyPageNoticeRead>>,
        TError,
        {data: NoticeReadReqDto},
        TContext
      > => {

      const mutationOptions = getPostUserMyPageNoticeReadMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * ÏïΩÍ¥Ä Ï°∞Ìöå API ÏûÖÎãàÎã§.
 * @summary ÏïΩÍ¥Ä Ï°∞Ìöå API
 */
export const getUserMyPageTerms = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageListTermsListResDto>(
      {url: `/api/v1/user/myPage/terms`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserMyPageTermsQueryKey = () => {
    return [`/api/v1/user/myPage/terms`] as const;
    }

    
export const getGetUserMyPageTermsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserMyPageTerms>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMyPageTerms>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserMyPageTermsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserMyPageTerms>>> = ({ signal }) => getUserMyPageTerms(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMyPageTerms>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserMyPageTermsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserMyPageTerms>>>
export type GetUserMyPageTermsInfiniteQueryError = unknown


export function useGetUserMyPageTermsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMyPageTerms>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMyPageTerms>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMyPageTerms>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMyPageTermsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMyPageTerms>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMyPageTerms>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMyPageTerms>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMyPageTermsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMyPageTerms>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMyPageTerms>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÏïΩÍ¥Ä Ï°∞Ìöå API
 */

export function useGetUserMyPageTermsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMyPageTerms>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMyPageTerms>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserMyPageTermsInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserMyPageTermsQueryOptions = <TData = Awaited<ReturnType<typeof getUserMyPageTerms>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMyPageTerms>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserMyPageTermsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserMyPageTerms>>> = ({ signal }) => getUserMyPageTerms(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserMyPageTerms>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserMyPageTermsQueryResult = NonNullable<Awaited<ReturnType<typeof getUserMyPageTerms>>>
export type GetUserMyPageTermsQueryError = unknown


export function useGetUserMyPageTerms<TData = Awaited<ReturnType<typeof getUserMyPageTerms>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMyPageTerms>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMyPageTerms>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMyPageTerms<TData = Awaited<ReturnType<typeof getUserMyPageTerms>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMyPageTerms>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMyPageTerms>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMyPageTerms<TData = Awaited<ReturnType<typeof getUserMyPageTerms>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMyPageTerms>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÏïΩÍ¥Ä Ï°∞Ìöå API
 */

export function useGetUserMyPageTerms<TData = Awaited<ReturnType<typeof getUserMyPageTerms>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMyPageTerms>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserMyPageTermsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ÏàòÏùµÍ¥ÄÎ¶¨ Ìó§Îçî Ï°∞Ìöå API ÏûÖÎãàÎã§.
 * @summary ÏàòÏùµÍ¥ÄÎ¶¨ Ìó§Îçî Ï°∞Ìöå API
 */
export const getUserMyPageSales = (
    params: GetUserMyPageSalesParams,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageSalesResDto>(
      {url: `/api/v1/user/myPage/sales`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUserMyPageSalesQueryKey = (params: GetUserMyPageSalesParams,) => {
    return [`/api/v1/user/myPage/sales`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserMyPageSalesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserMyPageSales>>, GetUserMyPageSalesParams['page']>, TError = unknown>(params: GetUserMyPageSalesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMyPageSales>>, TError, TData, Awaited<ReturnType<typeof getUserMyPageSales>>, QueryKey, GetUserMyPageSalesParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserMyPageSalesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserMyPageSales>>, QueryKey, GetUserMyPageSalesParams['page']> = ({ signal, pageParam }) => getUserMyPageSales({...params, page: pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMyPageSales>>, TError, TData, Awaited<ReturnType<typeof getUserMyPageSales>>, QueryKey, GetUserMyPageSalesParams['page']> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserMyPageSalesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserMyPageSales>>>
export type GetUserMyPageSalesInfiniteQueryError = unknown


export function useGetUserMyPageSalesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMyPageSales>>, GetUserMyPageSalesParams['page']>, TError = unknown>(
 params: GetUserMyPageSalesParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMyPageSales>>, TError, TData, Awaited<ReturnType<typeof getUserMyPageSales>>, QueryKey, GetUserMyPageSalesParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMyPageSales>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMyPageSalesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMyPageSales>>, GetUserMyPageSalesParams['page']>, TError = unknown>(
 params: GetUserMyPageSalesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMyPageSales>>, TError, TData, Awaited<ReturnType<typeof getUserMyPageSales>>, QueryKey, GetUserMyPageSalesParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMyPageSales>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMyPageSalesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMyPageSales>>, GetUserMyPageSalesParams['page']>, TError = unknown>(
 params: GetUserMyPageSalesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMyPageSales>>, TError, TData, Awaited<ReturnType<typeof getUserMyPageSales>>, QueryKey, GetUserMyPageSalesParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÏàòÏùµÍ¥ÄÎ¶¨ Ìó§Îçî Ï°∞Ìöå API
 */

export function useGetUserMyPageSalesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMyPageSales>>, GetUserMyPageSalesParams['page']>, TError = unknown>(
 params: GetUserMyPageSalesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMyPageSales>>, TError, TData, Awaited<ReturnType<typeof getUserMyPageSales>>, QueryKey, GetUserMyPageSalesParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserMyPageSalesInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserMyPageSalesQueryOptions = <TData = Awaited<ReturnType<typeof getUserMyPageSales>>, TError = unknown>(params: GetUserMyPageSalesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMyPageSales>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserMyPageSalesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserMyPageSales>>> = ({ signal }) => getUserMyPageSales(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserMyPageSales>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserMyPageSalesQueryResult = NonNullable<Awaited<ReturnType<typeof getUserMyPageSales>>>
export type GetUserMyPageSalesQueryError = unknown


export function useGetUserMyPageSales<TData = Awaited<ReturnType<typeof getUserMyPageSales>>, TError = unknown>(
 params: GetUserMyPageSalesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMyPageSales>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMyPageSales>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMyPageSales<TData = Awaited<ReturnType<typeof getUserMyPageSales>>, TError = unknown>(
 params: GetUserMyPageSalesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMyPageSales>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMyPageSales>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMyPageSales<TData = Awaited<ReturnType<typeof getUserMyPageSales>>, TError = unknown>(
 params: GetUserMyPageSalesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMyPageSales>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÏàòÏùµÍ¥ÄÎ¶¨ Ìó§Îçî Ï°∞Ìöå API
 */

export function useGetUserMyPageSales<TData = Awaited<ReturnType<typeof getUserMyPageSales>>, TError = unknown>(
 params: GetUserMyPageSalesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMyPageSales>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserMyPageSalesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ÏàòÏùµÍ¥ÄÎ¶¨ Î∞îÎîî Ï°∞Ìöå API ÏûÖÎãàÎã§.
 * @summary ÏàòÏùµÍ¥ÄÎ¶¨ Î∞îÎîî Ï°∞Ìöå API
 */
export const getUserMyPageSalesInfo = (
    params: GetUserMyPageSalesInfoParams,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageListSalesInfoResDto>(
      {url: `/api/v1/user/myPage/sales/info`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUserMyPageSalesInfoQueryKey = (params: GetUserMyPageSalesInfoParams,) => {
    return [`/api/v1/user/myPage/sales/info`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserMyPageSalesInfoInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserMyPageSalesInfo>>, GetUserMyPageSalesInfoParams['page']>, TError = unknown>(params: GetUserMyPageSalesInfoParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMyPageSalesInfo>>, TError, TData, Awaited<ReturnType<typeof getUserMyPageSalesInfo>>, QueryKey, GetUserMyPageSalesInfoParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserMyPageSalesInfoQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserMyPageSalesInfo>>, QueryKey, GetUserMyPageSalesInfoParams['page']> = ({ signal, pageParam }) => getUserMyPageSalesInfo({...params, page: pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMyPageSalesInfo>>, TError, TData, Awaited<ReturnType<typeof getUserMyPageSalesInfo>>, QueryKey, GetUserMyPageSalesInfoParams['page']> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserMyPageSalesInfoInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserMyPageSalesInfo>>>
export type GetUserMyPageSalesInfoInfiniteQueryError = unknown


export function useGetUserMyPageSalesInfoInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMyPageSalesInfo>>, GetUserMyPageSalesInfoParams['page']>, TError = unknown>(
 params: GetUserMyPageSalesInfoParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMyPageSalesInfo>>, TError, TData, Awaited<ReturnType<typeof getUserMyPageSalesInfo>>, QueryKey, GetUserMyPageSalesInfoParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMyPageSalesInfo>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMyPageSalesInfoInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMyPageSalesInfo>>, GetUserMyPageSalesInfoParams['page']>, TError = unknown>(
 params: GetUserMyPageSalesInfoParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMyPageSalesInfo>>, TError, TData, Awaited<ReturnType<typeof getUserMyPageSalesInfo>>, QueryKey, GetUserMyPageSalesInfoParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMyPageSalesInfo>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMyPageSalesInfoInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMyPageSalesInfo>>, GetUserMyPageSalesInfoParams['page']>, TError = unknown>(
 params: GetUserMyPageSalesInfoParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMyPageSalesInfo>>, TError, TData, Awaited<ReturnType<typeof getUserMyPageSalesInfo>>, QueryKey, GetUserMyPageSalesInfoParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÏàòÏùµÍ¥ÄÎ¶¨ Î∞îÎîî Ï°∞Ìöå API
 */

export function useGetUserMyPageSalesInfoInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMyPageSalesInfo>>, GetUserMyPageSalesInfoParams['page']>, TError = unknown>(
 params: GetUserMyPageSalesInfoParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMyPageSalesInfo>>, TError, TData, Awaited<ReturnType<typeof getUserMyPageSalesInfo>>, QueryKey, GetUserMyPageSalesInfoParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserMyPageSalesInfoInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserMyPageSalesInfoQueryOptions = <TData = Awaited<ReturnType<typeof getUserMyPageSalesInfo>>, TError = unknown>(params: GetUserMyPageSalesInfoParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMyPageSalesInfo>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserMyPageSalesInfoQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserMyPageSalesInfo>>> = ({ signal }) => getUserMyPageSalesInfo(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserMyPageSalesInfo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserMyPageSalesInfoQueryResult = NonNullable<Awaited<ReturnType<typeof getUserMyPageSalesInfo>>>
export type GetUserMyPageSalesInfoQueryError = unknown


export function useGetUserMyPageSalesInfo<TData = Awaited<ReturnType<typeof getUserMyPageSalesInfo>>, TError = unknown>(
 params: GetUserMyPageSalesInfoParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMyPageSalesInfo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMyPageSalesInfo>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMyPageSalesInfo<TData = Awaited<ReturnType<typeof getUserMyPageSalesInfo>>, TError = unknown>(
 params: GetUserMyPageSalesInfoParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMyPageSalesInfo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMyPageSalesInfo>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMyPageSalesInfo<TData = Awaited<ReturnType<typeof getUserMyPageSalesInfo>>, TError = unknown>(
 params: GetUserMyPageSalesInfoParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMyPageSalesInfo>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÏàòÏùµÍ¥ÄÎ¶¨ Î∞îÎîî Ï°∞Ìöå API
 */

export function useGetUserMyPageSalesInfo<TData = Awaited<ReturnType<typeof getUserMyPageSalesInfo>>, TError = unknown>(
 params: GetUserMyPageSalesInfoParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMyPageSalesInfo>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserMyPageSalesInfoQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ÏàòÏùµÍ¥ÄÎ¶¨ Î∞îÎîî ÏÉÅÏÑ∏ Ï°∞Ìöå API ÏûÖÎãàÎã§.
 * @summary ÏàòÏùµÍ¥ÄÎ¶¨ Î∞îÎîî ÏÉÅÏÑ∏ Ï°∞Ìöå API
 */
export const getUserMyPageSalesInfoDetail = (
    params: GetUserMyPageSalesInfoDetailParams,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageListSalesInfoDetailResDto>(
      {url: `/api/v1/user/myPage/sales/info/detail`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUserMyPageSalesInfoDetailQueryKey = (params: GetUserMyPageSalesInfoDetailParams,) => {
    return [`/api/v1/user/myPage/sales/info/detail`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserMyPageSalesInfoDetailInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserMyPageSalesInfoDetail>>, GetUserMyPageSalesInfoDetailParams['page']>, TError = unknown>(params: GetUserMyPageSalesInfoDetailParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMyPageSalesInfoDetail>>, TError, TData, Awaited<ReturnType<typeof getUserMyPageSalesInfoDetail>>, QueryKey, GetUserMyPageSalesInfoDetailParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserMyPageSalesInfoDetailQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserMyPageSalesInfoDetail>>, QueryKey, GetUserMyPageSalesInfoDetailParams['page']> = ({ signal, pageParam }) => getUserMyPageSalesInfoDetail({...params, page: pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMyPageSalesInfoDetail>>, TError, TData, Awaited<ReturnType<typeof getUserMyPageSalesInfoDetail>>, QueryKey, GetUserMyPageSalesInfoDetailParams['page']> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserMyPageSalesInfoDetailInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserMyPageSalesInfoDetail>>>
export type GetUserMyPageSalesInfoDetailInfiniteQueryError = unknown


export function useGetUserMyPageSalesInfoDetailInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMyPageSalesInfoDetail>>, GetUserMyPageSalesInfoDetailParams['page']>, TError = unknown>(
 params: GetUserMyPageSalesInfoDetailParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMyPageSalesInfoDetail>>, TError, TData, Awaited<ReturnType<typeof getUserMyPageSalesInfoDetail>>, QueryKey, GetUserMyPageSalesInfoDetailParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMyPageSalesInfoDetail>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMyPageSalesInfoDetailInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMyPageSalesInfoDetail>>, GetUserMyPageSalesInfoDetailParams['page']>, TError = unknown>(
 params: GetUserMyPageSalesInfoDetailParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMyPageSalesInfoDetail>>, TError, TData, Awaited<ReturnType<typeof getUserMyPageSalesInfoDetail>>, QueryKey, GetUserMyPageSalesInfoDetailParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMyPageSalesInfoDetail>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMyPageSalesInfoDetailInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMyPageSalesInfoDetail>>, GetUserMyPageSalesInfoDetailParams['page']>, TError = unknown>(
 params: GetUserMyPageSalesInfoDetailParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMyPageSalesInfoDetail>>, TError, TData, Awaited<ReturnType<typeof getUserMyPageSalesInfoDetail>>, QueryKey, GetUserMyPageSalesInfoDetailParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÏàòÏùµÍ¥ÄÎ¶¨ Î∞îÎîî ÏÉÅÏÑ∏ Ï°∞Ìöå API
 */

export function useGetUserMyPageSalesInfoDetailInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMyPageSalesInfoDetail>>, GetUserMyPageSalesInfoDetailParams['page']>, TError = unknown>(
 params: GetUserMyPageSalesInfoDetailParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMyPageSalesInfoDetail>>, TError, TData, Awaited<ReturnType<typeof getUserMyPageSalesInfoDetail>>, QueryKey, GetUserMyPageSalesInfoDetailParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserMyPageSalesInfoDetailInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserMyPageSalesInfoDetailQueryOptions = <TData = Awaited<ReturnType<typeof getUserMyPageSalesInfoDetail>>, TError = unknown>(params: GetUserMyPageSalesInfoDetailParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMyPageSalesInfoDetail>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserMyPageSalesInfoDetailQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserMyPageSalesInfoDetail>>> = ({ signal }) => getUserMyPageSalesInfoDetail(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserMyPageSalesInfoDetail>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserMyPageSalesInfoDetailQueryResult = NonNullable<Awaited<ReturnType<typeof getUserMyPageSalesInfoDetail>>>
export type GetUserMyPageSalesInfoDetailQueryError = unknown


export function useGetUserMyPageSalesInfoDetail<TData = Awaited<ReturnType<typeof getUserMyPageSalesInfoDetail>>, TError = unknown>(
 params: GetUserMyPageSalesInfoDetailParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMyPageSalesInfoDetail>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMyPageSalesInfoDetail>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMyPageSalesInfoDetail<TData = Awaited<ReturnType<typeof getUserMyPageSalesInfoDetail>>, TError = unknown>(
 params: GetUserMyPageSalesInfoDetailParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMyPageSalesInfoDetail>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMyPageSalesInfoDetail>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMyPageSalesInfoDetail<TData = Awaited<ReturnType<typeof getUserMyPageSalesInfoDetail>>, TError = unknown>(
 params: GetUserMyPageSalesInfoDetailParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMyPageSalesInfoDetail>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÏàòÏùµÍ¥ÄÎ¶¨ Î∞îÎîî ÏÉÅÏÑ∏ Ï°∞Ìöå API
 */

export function useGetUserMyPageSalesInfoDetail<TData = Awaited<ReturnType<typeof getUserMyPageSalesInfoDetail>>, TError = unknown>(
 params: GetUserMyPageSalesInfoDetailParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMyPageSalesInfoDetail>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserMyPageSalesInfoDetailQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Ìë∏Ïãú ÏÑ§Ï†ï Ï°∞Ìöå API ÏûÖÎãàÎã§.
 * @summary Ìë∏Ïãú ÏÑ§Ï†ï Ï°∞Ìöå API
 */
export const postUserMyPagePush = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageListPushSetResDto>(
      {url: `/api/v1/user/myPage/push`, method: 'GET', signal
    },
      );
    }
  

export const getPostUserMyPagePushQueryKey = () => {
    return [`/api/v1/user/myPage/push`] as const;
    }

    
export const getPostUserMyPagePushInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof postUserMyPagePush>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postUserMyPagePush>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPostUserMyPagePushQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof postUserMyPagePush>>> = ({ signal }) => postUserMyPagePush(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof postUserMyPagePush>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type PostUserMyPagePushInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof postUserMyPagePush>>>
export type PostUserMyPagePushInfiniteQueryError = unknown


export function usePostUserMyPagePushInfinite<TData = InfiniteData<Awaited<ReturnType<typeof postUserMyPagePush>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postUserMyPagePush>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof postUserMyPagePush>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function usePostUserMyPagePushInfinite<TData = InfiniteData<Awaited<ReturnType<typeof postUserMyPagePush>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postUserMyPagePush>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof postUserMyPagePush>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function usePostUserMyPagePushInfinite<TData = InfiniteData<Awaited<ReturnType<typeof postUserMyPagePush>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postUserMyPagePush>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ìë∏Ïãú ÏÑ§Ï†ï Ï°∞Ìöå API
 */

export function usePostUserMyPagePushInfinite<TData = InfiniteData<Awaited<ReturnType<typeof postUserMyPagePush>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof postUserMyPagePush>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getPostUserMyPagePushInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getPostUserMyPagePushQueryOptions = <TData = Awaited<ReturnType<typeof postUserMyPagePush>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof postUserMyPagePush>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPostUserMyPagePushQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof postUserMyPagePush>>> = ({ signal }) => postUserMyPagePush(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof postUserMyPagePush>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type PostUserMyPagePushQueryResult = NonNullable<Awaited<ReturnType<typeof postUserMyPagePush>>>
export type PostUserMyPagePushQueryError = unknown


export function usePostUserMyPagePush<TData = Awaited<ReturnType<typeof postUserMyPagePush>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof postUserMyPagePush>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof postUserMyPagePush>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function usePostUserMyPagePush<TData = Awaited<ReturnType<typeof postUserMyPagePush>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof postUserMyPagePush>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof postUserMyPagePush>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function usePostUserMyPagePush<TData = Awaited<ReturnType<typeof postUserMyPagePush>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof postUserMyPagePush>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ìë∏Ïãú ÏÑ§Ï†ï Ï°∞Ìöå API
 */

export function usePostUserMyPagePush<TData = Awaited<ReturnType<typeof postUserMyPagePush>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof postUserMyPagePush>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getPostUserMyPagePushQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Í≥µÏßÄÏÇ¨Ìï≠ Ï°∞Ìöå API ÏûÖÎãàÎã§.
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ Ï°∞Ìöå API
 */
export const getUserMyPageNotices = (
    params: GetUserMyPageNoticesParams,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageListNoticeResDto>(
      {url: `/api/v1/user/myPage/notices`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUserMyPageNoticesQueryKey = (params: GetUserMyPageNoticesParams,) => {
    return [`/api/v1/user/myPage/notices`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserMyPageNoticesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserMyPageNotices>>, GetUserMyPageNoticesParams['page']>, TError = unknown>(params: GetUserMyPageNoticesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMyPageNotices>>, TError, TData, Awaited<ReturnType<typeof getUserMyPageNotices>>, QueryKey, GetUserMyPageNoticesParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserMyPageNoticesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserMyPageNotices>>, QueryKey, GetUserMyPageNoticesParams['page']> = ({ signal, pageParam }) => getUserMyPageNotices({...params, page: pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMyPageNotices>>, TError, TData, Awaited<ReturnType<typeof getUserMyPageNotices>>, QueryKey, GetUserMyPageNoticesParams['page']> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserMyPageNoticesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserMyPageNotices>>>
export type GetUserMyPageNoticesInfiniteQueryError = unknown


export function useGetUserMyPageNoticesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMyPageNotices>>, GetUserMyPageNoticesParams['page']>, TError = unknown>(
 params: GetUserMyPageNoticesParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMyPageNotices>>, TError, TData, Awaited<ReturnType<typeof getUserMyPageNotices>>, QueryKey, GetUserMyPageNoticesParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMyPageNotices>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMyPageNoticesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMyPageNotices>>, GetUserMyPageNoticesParams['page']>, TError = unknown>(
 params: GetUserMyPageNoticesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMyPageNotices>>, TError, TData, Awaited<ReturnType<typeof getUserMyPageNotices>>, QueryKey, GetUserMyPageNoticesParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMyPageNotices>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMyPageNoticesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMyPageNotices>>, GetUserMyPageNoticesParams['page']>, TError = unknown>(
 params: GetUserMyPageNoticesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMyPageNotices>>, TError, TData, Awaited<ReturnType<typeof getUserMyPageNotices>>, QueryKey, GetUserMyPageNoticesParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ Ï°∞Ìöå API
 */

export function useGetUserMyPageNoticesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMyPageNotices>>, GetUserMyPageNoticesParams['page']>, TError = unknown>(
 params: GetUserMyPageNoticesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMyPageNotices>>, TError, TData, Awaited<ReturnType<typeof getUserMyPageNotices>>, QueryKey, GetUserMyPageNoticesParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserMyPageNoticesInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserMyPageNoticesQueryOptions = <TData = Awaited<ReturnType<typeof getUserMyPageNotices>>, TError = unknown>(params: GetUserMyPageNoticesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMyPageNotices>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserMyPageNoticesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserMyPageNotices>>> = ({ signal }) => getUserMyPageNotices(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserMyPageNotices>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserMyPageNoticesQueryResult = NonNullable<Awaited<ReturnType<typeof getUserMyPageNotices>>>
export type GetUserMyPageNoticesQueryError = unknown


export function useGetUserMyPageNotices<TData = Awaited<ReturnType<typeof getUserMyPageNotices>>, TError = unknown>(
 params: GetUserMyPageNoticesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMyPageNotices>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMyPageNotices>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMyPageNotices<TData = Awaited<ReturnType<typeof getUserMyPageNotices>>, TError = unknown>(
 params: GetUserMyPageNoticesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMyPageNotices>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMyPageNotices>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMyPageNotices<TData = Awaited<ReturnType<typeof getUserMyPageNotices>>, TError = unknown>(
 params: GetUserMyPageNoticesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMyPageNotices>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ Ï°∞Ìöå API
 */

export function useGetUserMyPageNotices<TData = Awaited<ReturnType<typeof getUserMyPageNotices>>, TError = unknown>(
 params: GetUserMyPageNoticesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMyPageNotices>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserMyPageNoticesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ÎßàÏù¥ÌéòÏù¥ÏßÄ Í∏∞Î≥∏ Ï†ïÎ≥¥ Ï°∞Ìöå API ÏûÖÎãàÎã§.
 * @summary ÎßàÏù¥ÌéòÏù¥ Í∏∞Î≥∏ Ï†ïÎ≥¥ Ï°∞Ìöå API
 */
export const getUserMyPageDefaultInfo = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageMyPageInfoResDto>(
      {url: `/api/v1/user/myPage/default-info`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserMyPageDefaultInfoQueryKey = () => {
    return [`/api/v1/user/myPage/default-info`] as const;
    }

    
export const getGetUserMyPageDefaultInfoInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserMyPageDefaultInfo>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMyPageDefaultInfo>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserMyPageDefaultInfoQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserMyPageDefaultInfo>>> = ({ signal }) => getUserMyPageDefaultInfo(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMyPageDefaultInfo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserMyPageDefaultInfoInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserMyPageDefaultInfo>>>
export type GetUserMyPageDefaultInfoInfiniteQueryError = unknown


export function useGetUserMyPageDefaultInfoInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMyPageDefaultInfo>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMyPageDefaultInfo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMyPageDefaultInfo>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMyPageDefaultInfoInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMyPageDefaultInfo>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMyPageDefaultInfo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMyPageDefaultInfo>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMyPageDefaultInfoInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMyPageDefaultInfo>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMyPageDefaultInfo>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÎßàÏù¥ÌéòÏù¥ Í∏∞Î≥∏ Ï†ïÎ≥¥ Ï°∞Ìöå API
 */

export function useGetUserMyPageDefaultInfoInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMyPageDefaultInfo>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMyPageDefaultInfo>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserMyPageDefaultInfoInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserMyPageDefaultInfoQueryOptions = <TData = Awaited<ReturnType<typeof getUserMyPageDefaultInfo>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMyPageDefaultInfo>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserMyPageDefaultInfoQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserMyPageDefaultInfo>>> = ({ signal }) => getUserMyPageDefaultInfo(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserMyPageDefaultInfo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserMyPageDefaultInfoQueryResult = NonNullable<Awaited<ReturnType<typeof getUserMyPageDefaultInfo>>>
export type GetUserMyPageDefaultInfoQueryError = unknown


export function useGetUserMyPageDefaultInfo<TData = Awaited<ReturnType<typeof getUserMyPageDefaultInfo>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMyPageDefaultInfo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMyPageDefaultInfo>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMyPageDefaultInfo<TData = Awaited<ReturnType<typeof getUserMyPageDefaultInfo>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMyPageDefaultInfo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMyPageDefaultInfo>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMyPageDefaultInfo<TData = Awaited<ReturnType<typeof getUserMyPageDefaultInfo>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMyPageDefaultInfo>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÎßàÏù¥ÌéòÏù¥ Í∏∞Î≥∏ Ï†ïÎ≥¥ Ï°∞Ìöå API
 */

export function useGetUserMyPageDefaultInfo<TData = Awaited<ReturnType<typeof getUserMyPageDefaultInfo>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMyPageDefaultInfo>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserMyPageDefaultInfoQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



