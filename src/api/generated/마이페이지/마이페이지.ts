/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Fittner API
 * Fittner API with Spring Boot
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  ApiResponseMessageListNoticeResDto,
  ApiResponseMessageListSalesDetailResDto,
  ApiResponseMessageListSalesResDto,
  ApiResponseMessageListTermsListResDto,
  ApiResponseMessageObject,
  ApiResponseMessageSalesInfoResDto,
  GetNoticesParams,
  GetSalesDetailParams,
  GetSalesParams,
  NoticeReadReqDto
} from '.././models'
import { axiosInstance } from '../../mutator/instance-wrapper';



/**
 * Í≥µÏßÄÏÇ¨Ìï≠ ÏùΩÏùå API ÏûÖÎãàÎã§.
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ ÏùΩÏùå API
 */
export const noticeRead = (
    noticeReadReqDto: NoticeReadReqDto,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageObject>(
      {url: `/api/v1/user/myPage/notice/read`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: noticeReadReqDto, signal
    },
      );
    }
  


export const getNoticeReadMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof noticeRead>>, TError,{data: NoticeReadReqDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof noticeRead>>, TError,{data: NoticeReadReqDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof noticeRead>>, {data: NoticeReadReqDto}> = (props) => {
          const {data} = props ?? {};

          return  noticeRead(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type NoticeReadMutationResult = NonNullable<Awaited<ReturnType<typeof noticeRead>>>
    export type NoticeReadMutationBody = NoticeReadReqDto
    export type NoticeReadMutationError = unknown

    /**
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ ÏùΩÏùå API
 */
export const useNoticeRead = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof noticeRead>>, TError,{data: NoticeReadReqDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof noticeRead>>,
        TError,
        {data: NoticeReadReqDto},
        TContext
      > => {

      const mutationOptions = getNoticeReadMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * ÏïΩÍ¥Ä Ï°∞Ìöå API ÏûÖÎãàÎã§.
 * @summary ÏïΩÍ¥Ä Ï°∞Ìöå API
 */
export const getTerms = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageListTermsListResDto>(
      {url: `/api/v1/user/myPage/terms`, method: 'GET', signal
    },
      );
    }
  

export const getGetTermsQueryKey = () => {
    return [`/api/v1/user/myPage/terms`] as const;
    }

    
export const getGetTermsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getTerms>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTerms>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTermsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTerms>>> = ({ signal }) => getTerms(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTerms>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTermsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getTerms>>>
export type GetTermsInfiniteQueryError = unknown


export function useGetTermsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getTerms>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTerms>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTerms>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTermsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getTerms>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTerms>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTerms>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTermsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getTerms>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTerms>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÏïΩÍ¥Ä Ï°∞Ìöå API
 */

export function useGetTermsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getTerms>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTerms>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTermsInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetTermsQueryOptions = <TData = Awaited<ReturnType<typeof getTerms>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTerms>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTermsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTerms>>> = ({ signal }) => getTerms(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTerms>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTermsQueryResult = NonNullable<Awaited<ReturnType<typeof getTerms>>>
export type GetTermsQueryError = unknown


export function useGetTerms<TData = Awaited<ReturnType<typeof getTerms>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTerms>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTerms>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTerms<TData = Awaited<ReturnType<typeof getTerms>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTerms>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTerms>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTerms<TData = Awaited<ReturnType<typeof getTerms>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTerms>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÏïΩÍ¥Ä Ï°∞Ìöå API
 */

export function useGetTerms<TData = Awaited<ReturnType<typeof getTerms>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTerms>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTermsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ÏàòÏùµÍ¥ÄÎ¶¨ Ï°∞Ìöå API ÏûÖÎãàÎã§.
 * @summary ÏàòÏùµÍ¥ÄÎ¶¨ Ï°∞Ìöå API
 */
export const getSales = (
    reservationStartMonth: string,
    params: GetSalesParams,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageListSalesResDto>(
      {url: `/api/v1/user/myPage/sales/${reservationStartMonth}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetSalesQueryKey = (reservationStartMonth: string,
    params: GetSalesParams,) => {
    return [`/api/v1/user/myPage/sales/${reservationStartMonth}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSalesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getSales>>, GetSalesParams['page']>, TError = unknown>(reservationStartMonth: string,
    params: GetSalesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSales>>, TError, TData, Awaited<ReturnType<typeof getSales>>, QueryKey, GetSalesParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSalesQueryKey(reservationStartMonth,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSales>>, QueryKey, GetSalesParams['page']> = ({ signal, pageParam }) => getSales(reservationStartMonth,{...params, page: pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(reservationStartMonth), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSales>>, TError, TData, Awaited<ReturnType<typeof getSales>>, QueryKey, GetSalesParams['page']> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSalesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getSales>>>
export type GetSalesInfiniteQueryError = unknown


export function useGetSalesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getSales>>, GetSalesParams['page']>, TError = unknown>(
 reservationStartMonth: string,
    params: GetSalesParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSales>>, TError, TData, Awaited<ReturnType<typeof getSales>>, QueryKey, GetSalesParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSales>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSalesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getSales>>, GetSalesParams['page']>, TError = unknown>(
 reservationStartMonth: string,
    params: GetSalesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSales>>, TError, TData, Awaited<ReturnType<typeof getSales>>, QueryKey, GetSalesParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSales>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSalesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getSales>>, GetSalesParams['page']>, TError = unknown>(
 reservationStartMonth: string,
    params: GetSalesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSales>>, TError, TData, Awaited<ReturnType<typeof getSales>>, QueryKey, GetSalesParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÏàòÏùµÍ¥ÄÎ¶¨ Ï°∞Ìöå API
 */

export function useGetSalesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getSales>>, GetSalesParams['page']>, TError = unknown>(
 reservationStartMonth: string,
    params: GetSalesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSales>>, TError, TData, Awaited<ReturnType<typeof getSales>>, QueryKey, GetSalesParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSalesInfiniteQueryOptions(reservationStartMonth,params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetSalesQueryOptions = <TData = Awaited<ReturnType<typeof getSales>>, TError = unknown>(reservationStartMonth: string,
    params: GetSalesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSales>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSalesQueryKey(reservationStartMonth,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSales>>> = ({ signal }) => getSales(reservationStartMonth,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(reservationStartMonth), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSales>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSalesQueryResult = NonNullable<Awaited<ReturnType<typeof getSales>>>
export type GetSalesQueryError = unknown


export function useGetSales<TData = Awaited<ReturnType<typeof getSales>>, TError = unknown>(
 reservationStartMonth: string,
    params: GetSalesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSales>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSales>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSales<TData = Awaited<ReturnType<typeof getSales>>, TError = unknown>(
 reservationStartMonth: string,
    params: GetSalesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSales>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSales>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSales<TData = Awaited<ReturnType<typeof getSales>>, TError = unknown>(
 reservationStartMonth: string,
    params: GetSalesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSales>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÏàòÏùµÍ¥ÄÎ¶¨ Ï°∞Ìöå API
 */

export function useGetSales<TData = Awaited<ReturnType<typeof getSales>>, TError = unknown>(
 reservationStartMonth: string,
    params: GetSalesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSales>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSalesQueryOptions(reservationStartMonth,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ÏàòÏùµÍ¥ÄÎ¶¨ ÏÉÅÏÑ∏ Ï°∞Ìöå API ÏûÖÎãàÎã§.
 * @summary ÏàòÏùµÍ¥ÄÎ¶¨ ÏÉÅÏÑ∏ Ï°∞Ìöå API
 */
export const getSalesDetail = (
    params: GetSalesDetailParams,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageListSalesDetailResDto>(
      {url: `/api/v1/user/myPage/sales/detail`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetSalesDetailQueryKey = (params: GetSalesDetailParams,) => {
    return [`/api/v1/user/myPage/sales/detail`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSalesDetailInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getSalesDetail>>, GetSalesDetailParams['page']>, TError = unknown>(params: GetSalesDetailParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSalesDetail>>, TError, TData, Awaited<ReturnType<typeof getSalesDetail>>, QueryKey, GetSalesDetailParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSalesDetailQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSalesDetail>>, QueryKey, GetSalesDetailParams['page']> = ({ signal, pageParam }) => getSalesDetail({...params, page: pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSalesDetail>>, TError, TData, Awaited<ReturnType<typeof getSalesDetail>>, QueryKey, GetSalesDetailParams['page']> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSalesDetailInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getSalesDetail>>>
export type GetSalesDetailInfiniteQueryError = unknown


export function useGetSalesDetailInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getSalesDetail>>, GetSalesDetailParams['page']>, TError = unknown>(
 params: GetSalesDetailParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSalesDetail>>, TError, TData, Awaited<ReturnType<typeof getSalesDetail>>, QueryKey, GetSalesDetailParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSalesDetail>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSalesDetailInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getSalesDetail>>, GetSalesDetailParams['page']>, TError = unknown>(
 params: GetSalesDetailParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSalesDetail>>, TError, TData, Awaited<ReturnType<typeof getSalesDetail>>, QueryKey, GetSalesDetailParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSalesDetail>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSalesDetailInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getSalesDetail>>, GetSalesDetailParams['page']>, TError = unknown>(
 params: GetSalesDetailParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSalesDetail>>, TError, TData, Awaited<ReturnType<typeof getSalesDetail>>, QueryKey, GetSalesDetailParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÏàòÏùµÍ¥ÄÎ¶¨ ÏÉÅÏÑ∏ Ï°∞Ìöå API
 */

export function useGetSalesDetailInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getSalesDetail>>, GetSalesDetailParams['page']>, TError = unknown>(
 params: GetSalesDetailParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSalesDetail>>, TError, TData, Awaited<ReturnType<typeof getSalesDetail>>, QueryKey, GetSalesDetailParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSalesDetailInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetSalesDetailQueryOptions = <TData = Awaited<ReturnType<typeof getSalesDetail>>, TError = unknown>(params: GetSalesDetailParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSalesDetail>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSalesDetailQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSalesDetail>>> = ({ signal }) => getSalesDetail(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSalesDetail>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSalesDetailQueryResult = NonNullable<Awaited<ReturnType<typeof getSalesDetail>>>
export type GetSalesDetailQueryError = unknown


export function useGetSalesDetail<TData = Awaited<ReturnType<typeof getSalesDetail>>, TError = unknown>(
 params: GetSalesDetailParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSalesDetail>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSalesDetail>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSalesDetail<TData = Awaited<ReturnType<typeof getSalesDetail>>, TError = unknown>(
 params: GetSalesDetailParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSalesDetail>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSalesDetail>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSalesDetail<TData = Awaited<ReturnType<typeof getSalesDetail>>, TError = unknown>(
 params: GetSalesDetailParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSalesDetail>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÏàòÏùµÍ¥ÄÎ¶¨ ÏÉÅÏÑ∏ Ï°∞Ìöå API
 */

export function useGetSalesDetail<TData = Awaited<ReturnType<typeof getSalesDetail>>, TError = unknown>(
 params: GetSalesDetailParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSalesDetail>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSalesDetailQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ÏàòÏùµÍ¥ÄÎ¶¨ ÏöîÏïΩ API ÏûÖÎãàÎã§.
 * @summary ÏàòÏùµÍ¥ÄÎ¶¨ ÏöîÏïΩ Ï°∞Ìöå API
 */
export const getSalesInfo = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageSalesInfoResDto>(
      {url: `/api/v1/user/myPage/sales-info`, method: 'GET', signal
    },
      );
    }
  

export const getGetSalesInfoQueryKey = () => {
    return [`/api/v1/user/myPage/sales-info`] as const;
    }

    
export const getGetSalesInfoInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getSalesInfo>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSalesInfo>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSalesInfoQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSalesInfo>>> = ({ signal }) => getSalesInfo(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSalesInfo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSalesInfoInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getSalesInfo>>>
export type GetSalesInfoInfiniteQueryError = unknown


export function useGetSalesInfoInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getSalesInfo>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSalesInfo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSalesInfo>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSalesInfoInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getSalesInfo>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSalesInfo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSalesInfo>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSalesInfoInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getSalesInfo>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSalesInfo>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÏàòÏùµÍ¥ÄÎ¶¨ ÏöîÏïΩ Ï°∞Ìöå API
 */

export function useGetSalesInfoInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getSalesInfo>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSalesInfo>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSalesInfoInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetSalesInfoQueryOptions = <TData = Awaited<ReturnType<typeof getSalesInfo>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSalesInfo>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSalesInfoQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSalesInfo>>> = ({ signal }) => getSalesInfo(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSalesInfo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSalesInfoQueryResult = NonNullable<Awaited<ReturnType<typeof getSalesInfo>>>
export type GetSalesInfoQueryError = unknown


export function useGetSalesInfo<TData = Awaited<ReturnType<typeof getSalesInfo>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSalesInfo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSalesInfo>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSalesInfo<TData = Awaited<ReturnType<typeof getSalesInfo>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSalesInfo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSalesInfo>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSalesInfo<TData = Awaited<ReturnType<typeof getSalesInfo>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSalesInfo>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÏàòÏùµÍ¥ÄÎ¶¨ ÏöîÏïΩ Ï°∞Ìöå API
 */

export function useGetSalesInfo<TData = Awaited<ReturnType<typeof getSalesInfo>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSalesInfo>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSalesInfoQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Í≥µÏßÄÏÇ¨Ìï≠ Ï°∞Ìöå API ÏûÖÎãàÎã§.
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ Ï°∞Ìöå API
 */
export const getNotices = (
    params: GetNoticesParams,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageListNoticeResDto>(
      {url: `/api/v1/user/myPage/notices`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetNoticesQueryKey = (params: GetNoticesParams,) => {
    return [`/api/v1/user/myPage/notices`, ...(params ? [params]: [])] as const;
    }

    
export const getGetNoticesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getNotices>>, GetNoticesParams['page']>, TError = unknown>(params: GetNoticesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getNotices>>, TError, TData, Awaited<ReturnType<typeof getNotices>>, QueryKey, GetNoticesParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNoticesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNotices>>, QueryKey, GetNoticesParams['page']> = ({ signal, pageParam }) => getNotices({...params, page: pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getNotices>>, TError, TData, Awaited<ReturnType<typeof getNotices>>, QueryKey, GetNoticesParams['page']> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetNoticesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getNotices>>>
export type GetNoticesInfiniteQueryError = unknown


export function useGetNoticesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getNotices>>, GetNoticesParams['page']>, TError = unknown>(
 params: GetNoticesParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getNotices>>, TError, TData, Awaited<ReturnType<typeof getNotices>>, QueryKey, GetNoticesParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotices>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNoticesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getNotices>>, GetNoticesParams['page']>, TError = unknown>(
 params: GetNoticesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getNotices>>, TError, TData, Awaited<ReturnType<typeof getNotices>>, QueryKey, GetNoticesParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotices>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNoticesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getNotices>>, GetNoticesParams['page']>, TError = unknown>(
 params: GetNoticesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getNotices>>, TError, TData, Awaited<ReturnType<typeof getNotices>>, QueryKey, GetNoticesParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ Ï°∞Ìöå API
 */

export function useGetNoticesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getNotices>>, GetNoticesParams['page']>, TError = unknown>(
 params: GetNoticesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getNotices>>, TError, TData, Awaited<ReturnType<typeof getNotices>>, QueryKey, GetNoticesParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetNoticesInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetNoticesQueryOptions = <TData = Awaited<ReturnType<typeof getNotices>>, TError = unknown>(params: GetNoticesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotices>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNoticesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNotices>>> = ({ signal }) => getNotices(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNotices>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetNoticesQueryResult = NonNullable<Awaited<ReturnType<typeof getNotices>>>
export type GetNoticesQueryError = unknown


export function useGetNotices<TData = Awaited<ReturnType<typeof getNotices>>, TError = unknown>(
 params: GetNoticesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotices>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotices>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNotices<TData = Awaited<ReturnType<typeof getNotices>>, TError = unknown>(
 params: GetNoticesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotices>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotices>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetNotices<TData = Awaited<ReturnType<typeof getNotices>>, TError = unknown>(
 params: GetNoticesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotices>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ Ï°∞Ìöå API
 */

export function useGetNotices<TData = Awaited<ReturnType<typeof getNotices>>, TError = unknown>(
 params: GetNoticesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotices>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetNoticesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



