/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Fittner API
 * Fittner API with Spring Boot
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  ApiResponseMessageListGroupedReservationDto,
  ApiResponseMessageMainReservationsResDto,
  ApiResponseMessagePageResponseDtoMainUserCenterListResDto,
  GetUserMainCentersParams,
  GetUserMainShortSchedulesParams
} from '.././models'
import { axiosInstance } from '../../mutator/instance-wrapper';



/**
 * Î©îÏù∏ÌéòÏù¥ÏßÄÏùò ÏùºÏ†ï Í∞ÑÎûµÎ≥¥Í∏∞ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå API ÏûÖÎãàÎã§.
 * @summary Î©îÏù∏ÌéòÏù¥ÏßÄ ÏùºÏ†ï Í∞ÑÎûµÎ≥¥Í∏∞ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå API
 */
export const getUserMainShortSchedules = (
    params: GetUserMainShortSchedulesParams,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageListGroupedReservationDto>(
      {url: `/api/v1/user/main/short-schedules`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUserMainShortSchedulesQueryKey = (params: GetUserMainShortSchedulesParams,) => {
    return [`/api/v1/user/main/short-schedules`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserMainShortSchedulesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserMainShortSchedules>>, GetUserMainShortSchedulesParams['page']>, TError = unknown>(params: GetUserMainShortSchedulesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMainShortSchedules>>, TError, TData, Awaited<ReturnType<typeof getUserMainShortSchedules>>, QueryKey, GetUserMainShortSchedulesParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserMainShortSchedulesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserMainShortSchedules>>, QueryKey, GetUserMainShortSchedulesParams['page']> = ({ signal, pageParam }) => getUserMainShortSchedules({...params, page: pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMainShortSchedules>>, TError, TData, Awaited<ReturnType<typeof getUserMainShortSchedules>>, QueryKey, GetUserMainShortSchedulesParams['page']> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserMainShortSchedulesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserMainShortSchedules>>>
export type GetUserMainShortSchedulesInfiniteQueryError = unknown


export function useGetUserMainShortSchedulesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMainShortSchedules>>, GetUserMainShortSchedulesParams['page']>, TError = unknown>(
 params: GetUserMainShortSchedulesParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMainShortSchedules>>, TError, TData, Awaited<ReturnType<typeof getUserMainShortSchedules>>, QueryKey, GetUserMainShortSchedulesParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMainShortSchedules>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMainShortSchedulesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMainShortSchedules>>, GetUserMainShortSchedulesParams['page']>, TError = unknown>(
 params: GetUserMainShortSchedulesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMainShortSchedules>>, TError, TData, Awaited<ReturnType<typeof getUserMainShortSchedules>>, QueryKey, GetUserMainShortSchedulesParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMainShortSchedules>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMainShortSchedulesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMainShortSchedules>>, GetUserMainShortSchedulesParams['page']>, TError = unknown>(
 params: GetUserMainShortSchedulesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMainShortSchedules>>, TError, TData, Awaited<ReturnType<typeof getUserMainShortSchedules>>, QueryKey, GetUserMainShortSchedulesParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Î©îÏù∏ÌéòÏù¥ÏßÄ ÏùºÏ†ï Í∞ÑÎûµÎ≥¥Í∏∞ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå API
 */

export function useGetUserMainShortSchedulesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMainShortSchedules>>, GetUserMainShortSchedulesParams['page']>, TError = unknown>(
 params: GetUserMainShortSchedulesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMainShortSchedules>>, TError, TData, Awaited<ReturnType<typeof getUserMainShortSchedules>>, QueryKey, GetUserMainShortSchedulesParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserMainShortSchedulesInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserMainShortSchedulesQueryOptions = <TData = Awaited<ReturnType<typeof getUserMainShortSchedules>>, TError = unknown>(params: GetUserMainShortSchedulesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMainShortSchedules>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserMainShortSchedulesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserMainShortSchedules>>> = ({ signal }) => getUserMainShortSchedules(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserMainShortSchedules>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserMainShortSchedulesQueryResult = NonNullable<Awaited<ReturnType<typeof getUserMainShortSchedules>>>
export type GetUserMainShortSchedulesQueryError = unknown


export function useGetUserMainShortSchedules<TData = Awaited<ReturnType<typeof getUserMainShortSchedules>>, TError = unknown>(
 params: GetUserMainShortSchedulesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMainShortSchedules>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMainShortSchedules>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMainShortSchedules<TData = Awaited<ReturnType<typeof getUserMainShortSchedules>>, TError = unknown>(
 params: GetUserMainShortSchedulesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMainShortSchedules>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMainShortSchedules>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMainShortSchedules<TData = Awaited<ReturnType<typeof getUserMainShortSchedules>>, TError = unknown>(
 params: GetUserMainShortSchedulesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMainShortSchedules>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Î©îÏù∏ÌéòÏù¥ÏßÄ ÏùºÏ†ï Í∞ÑÎûµÎ≥¥Í∏∞ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå API
 */

export function useGetUserMainShortSchedules<TData = Awaited<ReturnType<typeof getUserMainShortSchedules>>, TError = unknown>(
 params: GetUserMainShortSchedulesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMainShortSchedules>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserMainShortSchedulesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Î©îÏù∏ÌéòÏù¥ÏßÄ ÏÉÅÎã® ÏàòÏóÖ ÌëúÏ∂ú Îã®Í±¥Ï°∞Ìöå API ÏûÖÎãàÎã§.
 * @summary Î©îÏù∏ÌéòÏù¥ÏßÄ ÏÉÅÎã® ÏàòÏóÖ ÌëúÏ∂ú Îã®Í±¥Ï°∞Ìöå API
 */
export const getUserMainSchedule = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageMainReservationsResDto>(
      {url: `/api/v1/user/main/schedule`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserMainScheduleQueryKey = () => {
    return [`/api/v1/user/main/schedule`] as const;
    }

    
export const getGetUserMainScheduleInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserMainSchedule>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMainSchedule>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserMainScheduleQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserMainSchedule>>> = ({ signal }) => getUserMainSchedule(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMainSchedule>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserMainScheduleInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserMainSchedule>>>
export type GetUserMainScheduleInfiniteQueryError = unknown


export function useGetUserMainScheduleInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMainSchedule>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMainSchedule>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMainSchedule>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMainScheduleInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMainSchedule>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMainSchedule>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMainSchedule>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMainScheduleInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMainSchedule>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMainSchedule>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Î©îÏù∏ÌéòÏù¥ÏßÄ ÏÉÅÎã® ÏàòÏóÖ ÌëúÏ∂ú Îã®Í±¥Ï°∞Ìöå API
 */

export function useGetUserMainScheduleInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMainSchedule>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMainSchedule>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserMainScheduleInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserMainScheduleQueryOptions = <TData = Awaited<ReturnType<typeof getUserMainSchedule>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMainSchedule>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserMainScheduleQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserMainSchedule>>> = ({ signal }) => getUserMainSchedule(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserMainSchedule>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserMainScheduleQueryResult = NonNullable<Awaited<ReturnType<typeof getUserMainSchedule>>>
export type GetUserMainScheduleQueryError = unknown


export function useGetUserMainSchedule<TData = Awaited<ReturnType<typeof getUserMainSchedule>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMainSchedule>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMainSchedule>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMainSchedule<TData = Awaited<ReturnType<typeof getUserMainSchedule>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMainSchedule>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMainSchedule>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMainSchedule<TData = Awaited<ReturnType<typeof getUserMainSchedule>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMainSchedule>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Î©îÏù∏ÌéòÏù¥ÏßÄ ÏÉÅÎã® ÏàòÏóÖ ÌëúÏ∂ú Îã®Í±¥Ï°∞Ìöå API
 */

export function useGetUserMainSchedule<TData = Awaited<ReturnType<typeof getUserMainSchedule>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMainSchedule>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserMainScheduleQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Ìä∏Î†àÏù¥ÎÑàÍ∞Ä ÏßÄÏ†ïÌïú ÏÑºÌÑ∞ Î™©Î°ù Ï°∞Ìöå API ÏûÖÎãàÎã§.
 * @summary Î©îÏù∏ÏóêÏÑú Ìä∏Î†àÏù¥ÎÑàÍ∞Ä ÏßÄÏ†ïÌïú ÏÑºÌÑ∞ Î™©Î°ù Ï°∞Ìöå API
 */
export const getUserMainCenters = (
    params?: GetUserMainCentersParams,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessagePageResponseDtoMainUserCenterListResDto>(
      {url: `/api/v1/user/main/centers`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUserMainCentersQueryKey = (params?: GetUserMainCentersParams,) => {
    return [`/api/v1/user/main/centers`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserMainCentersInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserMainCenters>>, GetUserMainCentersParams['page']>, TError = unknown>(params?: GetUserMainCentersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMainCenters>>, TError, TData, Awaited<ReturnType<typeof getUserMainCenters>>, QueryKey, GetUserMainCentersParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserMainCentersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserMainCenters>>, QueryKey, GetUserMainCentersParams['page']> = ({ signal, pageParam }) => getUserMainCenters({...params, page: pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMainCenters>>, TError, TData, Awaited<ReturnType<typeof getUserMainCenters>>, QueryKey, GetUserMainCentersParams['page']> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserMainCentersInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserMainCenters>>>
export type GetUserMainCentersInfiniteQueryError = unknown


export function useGetUserMainCentersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMainCenters>>, GetUserMainCentersParams['page']>, TError = unknown>(
 params: undefined |  GetUserMainCentersParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMainCenters>>, TError, TData, Awaited<ReturnType<typeof getUserMainCenters>>, QueryKey, GetUserMainCentersParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMainCenters>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMainCentersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMainCenters>>, GetUserMainCentersParams['page']>, TError = unknown>(
 params?: GetUserMainCentersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMainCenters>>, TError, TData, Awaited<ReturnType<typeof getUserMainCenters>>, QueryKey, GetUserMainCentersParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMainCenters>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMainCentersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMainCenters>>, GetUserMainCentersParams['page']>, TError = unknown>(
 params?: GetUserMainCentersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMainCenters>>, TError, TData, Awaited<ReturnType<typeof getUserMainCenters>>, QueryKey, GetUserMainCentersParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Î©îÏù∏ÏóêÏÑú Ìä∏Î†àÏù¥ÎÑàÍ∞Ä ÏßÄÏ†ïÌïú ÏÑºÌÑ∞ Î™©Î°ù Ï°∞Ìöå API
 */

export function useGetUserMainCentersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMainCenters>>, GetUserMainCentersParams['page']>, TError = unknown>(
 params?: GetUserMainCentersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMainCenters>>, TError, TData, Awaited<ReturnType<typeof getUserMainCenters>>, QueryKey, GetUserMainCentersParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserMainCentersInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserMainCentersQueryOptions = <TData = Awaited<ReturnType<typeof getUserMainCenters>>, TError = unknown>(params?: GetUserMainCentersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMainCenters>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserMainCentersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserMainCenters>>> = ({ signal }) => getUserMainCenters(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserMainCenters>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserMainCentersQueryResult = NonNullable<Awaited<ReturnType<typeof getUserMainCenters>>>
export type GetUserMainCentersQueryError = unknown


export function useGetUserMainCenters<TData = Awaited<ReturnType<typeof getUserMainCenters>>, TError = unknown>(
 params: undefined |  GetUserMainCentersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMainCenters>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMainCenters>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMainCenters<TData = Awaited<ReturnType<typeof getUserMainCenters>>, TError = unknown>(
 params?: GetUserMainCentersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMainCenters>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMainCenters>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMainCenters<TData = Awaited<ReturnType<typeof getUserMainCenters>>, TError = unknown>(
 params?: GetUserMainCentersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMainCenters>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Î©îÏù∏ÏóêÏÑú Ìä∏Î†àÏù¥ÎÑàÍ∞Ä ÏßÄÏ†ïÌïú ÏÑºÌÑ∞ Î™©Î°ù Ï°∞Ìöå API
 */

export function useGetUserMainCenters<TData = Awaited<ReturnType<typeof getUserMainCenters>>, TError = unknown>(
 params?: GetUserMainCentersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMainCenters>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserMainCentersQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



