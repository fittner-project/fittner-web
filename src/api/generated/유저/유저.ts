/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Fittner API
 * Fittner API with Spring Boot
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  ApiResponseMessageListCenterListResDto,
  ApiResponseMessageListMemberDetailResDto,
  ApiResponseMessageListTermsResDto,
  ApiResponseMessageObject,
  ApiResponseMessagePageResponseDtoMainUserCenterListResDto,
  ApiResponseMessagePageResponseDtoUserCenterListResDto,
  ApiResponseMessageUserInfoResDto,
  CancelCenterApprovalReqDto,
  CenterRegisterReqDto,
  GetUserCentersParams,
  GetUserMainCentersParams,
  GetUserMembers200,
  JoinReqDto,
  MemberRegisterReqDto
} from '.././models'
import { axiosInstance } from '../../mutator/instance-wrapper';



/**
 * Ìä∏Î†àÏù¥ÎÑàÍ∞Ä ÌöåÏõêÏùÑ Îì±Î°ùÌïòÎäî API ÏûÖÎãàÎã§.
 * @summary Ìä∏Î†àÏù¥ÎÑàÍ∞Ä ÌöåÏõêÏùÑ Îì±Î°ùÌïòÎäî API
 */
export const postUserRegister = (
    memberRegisterReqDto: MemberRegisterReqDto,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageObject>(
      {url: `/api/v1/user/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: memberRegisterReqDto, signal
    },
      );
    }
  


export const getPostUserRegisterMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserRegister>>, TError,{data: MemberRegisterReqDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postUserRegister>>, TError,{data: MemberRegisterReqDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserRegister>>, {data: MemberRegisterReqDto}> = (props) => {
          const {data} = props ?? {};

          return  postUserRegister(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof postUserRegister>>>
    export type PostUserRegisterMutationBody = MemberRegisterReqDto
    export type PostUserRegisterMutationError = unknown

    /**
 * @summary Ìä∏Î†àÏù¥ÎÑàÍ∞Ä ÌöåÏõêÏùÑ Îì±Î°ùÌïòÎäî API
 */
export const usePostUserRegister = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserRegister>>, TError,{data: MemberRegisterReqDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postUserRegister>>,
        TError,
        {data: MemberRegisterReqDto},
        TContext
      > => {

      const mutationOptions = getPostUserRegisterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Ìä∏Î†àÏù¥ÎÑà ÌöåÏõêÍ∞ÄÏûÖ API ÏûÖÎãàÎã§.
 * @summary Ìä∏Î†àÏù¥ÎÑà ÌöåÏõêÍ∞ÄÏûÖ API
 */
export const postUserJoin = (
    joinReqDto: JoinReqDto,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageObject>(
      {url: `/api/v1/user/join`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: joinReqDto, signal
    },
      );
    }
  


export const getPostUserJoinMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserJoin>>, TError,{data: JoinReqDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postUserJoin>>, TError,{data: JoinReqDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserJoin>>, {data: JoinReqDto}> = (props) => {
          const {data} = props ?? {};

          return  postUserJoin(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserJoinMutationResult = NonNullable<Awaited<ReturnType<typeof postUserJoin>>>
    export type PostUserJoinMutationBody = JoinReqDto
    export type PostUserJoinMutationError = unknown

    /**
 * @summary Ìä∏Î†àÏù¥ÎÑà ÌöåÏõêÍ∞ÄÏûÖ API
 */
export const usePostUserJoin = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserJoin>>, TError,{data: JoinReqDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postUserJoin>>,
        TError,
        {data: JoinReqDto},
        TContext
      > => {

      const mutationOptions = getPostUserJoinMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Ìä∏Î†àÏù¥ÎÑà Í≥ÑÏ†ï ÌÉàÌá¥ API ÏûÖÎãàÎã§.
 * @summary Ìä∏Î†àÏù¥ÎÑà Í≥ÑÏ†ï ÌÉàÌá¥
 */
export const postUserDrop = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageObject>(
      {url: `/api/v1/user/drop`, method: 'POST', signal
    },
      );
    }
  


export const getPostUserDropMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserDrop>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postUserDrop>>, TError,void, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserDrop>>, void> = () => {
          

          return  postUserDrop()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserDropMutationResult = NonNullable<Awaited<ReturnType<typeof postUserDrop>>>
    
    export type PostUserDropMutationError = unknown

    /**
 * @summary Ìä∏Î†àÏù¥ÎÑà Í≥ÑÏ†ï ÌÉàÌá¥
 */
export const usePostUserDrop = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserDrop>>, TError,void, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postUserDrop>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostUserDropMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Ìä∏Î†àÏù¥ÎÑàÏùò ÏÑºÌÑ∞ Îì±Î°ù API ÏûÖÎãàÎã§.
 * @summary Ìä∏Î†àÏù¥ÎÑàÏùò ÏÑºÌÑ∞ Îì±Î°ù API
 */
export const postUserCenter = (
    centerRegisterReqDto: CenterRegisterReqDto,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageObject>(
      {url: `/api/v1/user/center`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: centerRegisterReqDto, signal
    },
      );
    }
  


export const getPostUserCenterMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserCenter>>, TError,{data: CenterRegisterReqDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postUserCenter>>, TError,{data: CenterRegisterReqDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserCenter>>, {data: CenterRegisterReqDto}> = (props) => {
          const {data} = props ?? {};

          return  postUserCenter(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserCenterMutationResult = NonNullable<Awaited<ReturnType<typeof postUserCenter>>>
    export type PostUserCenterMutationBody = CenterRegisterReqDto
    export type PostUserCenterMutationError = unknown

    /**
 * @summary Ìä∏Î†àÏù¥ÎÑàÏùò ÏÑºÌÑ∞ Îì±Î°ù API
 */
export const usePostUserCenter = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserCenter>>, TError,{data: CenterRegisterReqDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postUserCenter>>,
        TError,
        {data: CenterRegisterReqDto},
        TContext
      > => {

      const mutationOptions = getPostUserCenterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Ìä∏Î†àÏù¥ÎÑà Î≥∏Ïù∏Ïù¥ ÏäπÏù∏ÏöîÏ≤≠ÌïúÍ±∏ ÏäπÏù∏Ï∑®ÏÜåÌïòÎäî API ÏûÖÎãàÎã§.
 * @summary Ìä∏Î†àÏù¥ÎÑà Î≥∏Ïù∏Ïù¥ ÏäπÏù∏ÏöîÏ≤≠ÌïúÍ±∏ ÏäπÏù∏Ï∑®ÏÜåÌïòÎäî API
 */
export const deleteUserCenter = (
    cancelCenterApprovalReqDto: CancelCenterApprovalReqDto,
 ) => {
      
      
      return axiosInstance<ApiResponseMessageObject>(
      {url: `/api/v1/user/center`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: cancelCenterApprovalReqDto
    },
      );
    }
  


export const getDeleteUserCenterMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUserCenter>>, TError,{data: CancelCenterApprovalReqDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteUserCenter>>, TError,{data: CancelCenterApprovalReqDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteUserCenter>>, {data: CancelCenterApprovalReqDto}> = (props) => {
          const {data} = props ?? {};

          return  deleteUserCenter(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteUserCenterMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUserCenter>>>
    export type DeleteUserCenterMutationBody = CancelCenterApprovalReqDto
    export type DeleteUserCenterMutationError = unknown

    /**
 * @summary Ìä∏Î†àÏù¥ÎÑà Î≥∏Ïù∏Ïù¥ ÏäπÏù∏ÏöîÏ≤≠ÌïúÍ±∏ ÏäπÏù∏Ï∑®ÏÜåÌïòÎäî API
 */
export const useDeleteUserCenter = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUserCenter>>, TError,{data: CancelCenterApprovalReqDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteUserCenter>>,
        TError,
        {data: CancelCenterApprovalReqDto},
        TContext
      > => {

      const mutationOptions = getDeleteUserCenterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * ÌöåÏõêÍ∞ÄÏûÖ ÏïΩÍ¥Ä Ï°∞Ìöå API ÏûÖÎãàÎã§.
 * @summary ÌöåÏõêÍ∞ÄÏûÖ ÏïΩÍ¥Ä Ï°∞Ìöå API
 */
export const getUserTerms = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageListTermsResDto>(
      {url: `/api/v1/user/terms`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserTermsQueryKey = () => {
    return [`/api/v1/user/terms`] as const;
    }

    
export const getGetUserTermsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserTerms>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserTerms>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserTermsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserTerms>>> = ({ signal }) => getUserTerms(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserTerms>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserTermsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserTerms>>>
export type GetUserTermsInfiniteQueryError = unknown


export function useGetUserTermsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserTerms>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserTerms>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserTerms>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserTermsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserTerms>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserTerms>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserTerms>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserTermsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserTerms>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserTerms>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÌöåÏõêÍ∞ÄÏûÖ ÏïΩÍ¥Ä Ï°∞Ìöå API
 */

export function useGetUserTermsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserTerms>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserTerms>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserTermsInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserTermsQueryOptions = <TData = Awaited<ReturnType<typeof getUserTerms>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserTerms>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserTermsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserTerms>>> = ({ signal }) => getUserTerms(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserTerms>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserTermsQueryResult = NonNullable<Awaited<ReturnType<typeof getUserTerms>>>
export type GetUserTermsQueryError = unknown


export function useGetUserTerms<TData = Awaited<ReturnType<typeof getUserTerms>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserTerms>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserTerms>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserTerms<TData = Awaited<ReturnType<typeof getUserTerms>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserTerms>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserTerms>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserTerms<TData = Awaited<ReturnType<typeof getUserTerms>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserTerms>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÌöåÏõêÍ∞ÄÏûÖ ÏïΩÍ¥Ä Ï°∞Ìöå API
 */

export function useGetUserTerms<TData = Awaited<ReturnType<typeof getUserTerms>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserTerms>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserTermsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Ìä∏Î†àÏù¥ÎÑàÏùò ÌöåÏõê Î™©Î°ù Ï°∞Ìöå API ÏûÖÎãàÎã§.
 * @summary Ìä∏Î†àÏù¥ÎÑàÏùò ÌöåÏõê Î™©Î°ù Ï°∞Ìöå API
 */
export const getUserMembers = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<GetUserMembers200>(
      {url: `/api/v1/user/members`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserMembersQueryKey = () => {
    return [`/api/v1/user/members`] as const;
    }

    
export const getGetUserMembersInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserMembers>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMembers>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserMembersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserMembers>>> = ({ signal }) => getUserMembers(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMembers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserMembersInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserMembers>>>
export type GetUserMembersInfiniteQueryError = unknown


export function useGetUserMembersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMembers>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMembers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMembers>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMembersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMembers>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMembers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMembers>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMembersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMembers>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMembers>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ìä∏Î†àÏù¥ÎÑàÏùò ÌöåÏõê Î™©Î°ù Ï°∞Ìöå API
 */

export function useGetUserMembersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMembers>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMembers>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserMembersInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserMembersQueryOptions = <TData = Awaited<ReturnType<typeof getUserMembers>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMembers>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserMembersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserMembers>>> = ({ signal }) => getUserMembers(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserMembers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserMembersQueryResult = NonNullable<Awaited<ReturnType<typeof getUserMembers>>>
export type GetUserMembersQueryError = unknown


export function useGetUserMembers<TData = Awaited<ReturnType<typeof getUserMembers>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMembers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMembers>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMembers<TData = Awaited<ReturnType<typeof getUserMembers>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMembers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMembers>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMembers<TData = Awaited<ReturnType<typeof getUserMembers>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMembers>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ìä∏Î†àÏù¥ÎÑàÏùò ÌöåÏõê Î™©Î°ù Ï°∞Ìöå API
 */

export function useGetUserMembers<TData = Awaited<ReturnType<typeof getUserMembers>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMembers>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserMembersQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Ìä∏Î†àÏù¥ÎÑàÏùò ÌöåÏõê ÏÉÅÏÑ∏ Ï°∞Ìöå API ÏûÖÎãàÎã§.
 * @summary Ìä∏Î†àÏù¥ÎÑàÏùò ÌöåÏõê ÏÉÅÏÑ∏ Ï°∞Ìöå API
 */
export const getUserMemberMemberId = (
    memberId: string,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageListMemberDetailResDto>(
      {url: `/api/v1/user/member/${memberId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserMemberMemberIdQueryKey = (memberId: string,) => {
    return [`/api/v1/user/member/${memberId}`] as const;
    }

    
export const getGetUserMemberMemberIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserMemberMemberId>>>, TError = unknown>(memberId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMemberMemberId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserMemberMemberIdQueryKey(memberId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserMemberMemberId>>> = ({ signal }) => getUserMemberMemberId(memberId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(memberId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMemberMemberId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserMemberMemberIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserMemberMemberId>>>
export type GetUserMemberMemberIdInfiniteQueryError = unknown


export function useGetUserMemberMemberIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMemberMemberId>>>, TError = unknown>(
 memberId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMemberMemberId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMemberMemberId>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMemberMemberIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMemberMemberId>>>, TError = unknown>(
 memberId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMemberMemberId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMemberMemberId>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMemberMemberIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMemberMemberId>>>, TError = unknown>(
 memberId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMemberMemberId>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ìä∏Î†àÏù¥ÎÑàÏùò ÌöåÏõê ÏÉÅÏÑ∏ Ï°∞Ìöå API
 */

export function useGetUserMemberMemberIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMemberMemberId>>>, TError = unknown>(
 memberId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMemberMemberId>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserMemberMemberIdInfiniteQueryOptions(memberId,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserMemberMemberIdQueryOptions = <TData = Awaited<ReturnType<typeof getUserMemberMemberId>>, TError = unknown>(memberId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMemberMemberId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserMemberMemberIdQueryKey(memberId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserMemberMemberId>>> = ({ signal }) => getUserMemberMemberId(memberId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(memberId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserMemberMemberId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserMemberMemberIdQueryResult = NonNullable<Awaited<ReturnType<typeof getUserMemberMemberId>>>
export type GetUserMemberMemberIdQueryError = unknown


export function useGetUserMemberMemberId<TData = Awaited<ReturnType<typeof getUserMemberMemberId>>, TError = unknown>(
 memberId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMemberMemberId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMemberMemberId>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMemberMemberId<TData = Awaited<ReturnType<typeof getUserMemberMemberId>>, TError = unknown>(
 memberId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMemberMemberId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMemberMemberId>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMemberMemberId<TData = Awaited<ReturnType<typeof getUserMemberMemberId>>, TError = unknown>(
 memberId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMemberMemberId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ìä∏Î†àÏù¥ÎÑàÏùò ÌöåÏõê ÏÉÅÏÑ∏ Ï°∞Ìöå API
 */

export function useGetUserMemberMemberId<TData = Awaited<ReturnType<typeof getUserMemberMemberId>>, TError = unknown>(
 memberId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMemberMemberId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserMemberMemberIdQueryOptions(memberId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Ìä∏Î†àÏù¥ÎÑàÍ∞Ä ÏßÄÏ†ïÌïú ÏÑºÌÑ∞ Î™©Î°ù Ï°∞Ìöå API ÏûÖÎãàÎã§.
 * @summary Î©îÏù∏ÏóêÏÑú Ìä∏Î†àÏù¥ÎÑàÍ∞Ä ÏßÄÏ†ïÌïú ÏÑºÌÑ∞ Î™©Î°ù Ï°∞Ìöå API
 */
export const getUserMainCenters = (
    params: GetUserMainCentersParams,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessagePageResponseDtoMainUserCenterListResDto>(
      {url: `/api/v1/user/main/centers`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUserMainCentersQueryKey = (params: GetUserMainCentersParams,) => {
    return [`/api/v1/user/main/centers`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserMainCentersInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserMainCenters>>, GetUserMainCentersParams['page']>, TError = unknown>(params: GetUserMainCentersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMainCenters>>, TError, TData, Awaited<ReturnType<typeof getUserMainCenters>>, QueryKey, GetUserMainCentersParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserMainCentersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserMainCenters>>, QueryKey, GetUserMainCentersParams['page']> = ({ signal, pageParam }) => getUserMainCenters({...params, page: pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMainCenters>>, TError, TData, Awaited<ReturnType<typeof getUserMainCenters>>, QueryKey, GetUserMainCentersParams['page']> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserMainCentersInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserMainCenters>>>
export type GetUserMainCentersInfiniteQueryError = unknown


export function useGetUserMainCentersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMainCenters>>, GetUserMainCentersParams['page']>, TError = unknown>(
 params: GetUserMainCentersParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMainCenters>>, TError, TData, Awaited<ReturnType<typeof getUserMainCenters>>, QueryKey, GetUserMainCentersParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMainCenters>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMainCentersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMainCenters>>, GetUserMainCentersParams['page']>, TError = unknown>(
 params: GetUserMainCentersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMainCenters>>, TError, TData, Awaited<ReturnType<typeof getUserMainCenters>>, QueryKey, GetUserMainCentersParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMainCenters>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMainCentersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMainCenters>>, GetUserMainCentersParams['page']>, TError = unknown>(
 params: GetUserMainCentersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMainCenters>>, TError, TData, Awaited<ReturnType<typeof getUserMainCenters>>, QueryKey, GetUserMainCentersParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Î©îÏù∏ÏóêÏÑú Ìä∏Î†àÏù¥ÎÑàÍ∞Ä ÏßÄÏ†ïÌïú ÏÑºÌÑ∞ Î™©Î°ù Ï°∞Ìöå API
 */

export function useGetUserMainCentersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserMainCenters>>, GetUserMainCentersParams['page']>, TError = unknown>(
 params: GetUserMainCentersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserMainCenters>>, TError, TData, Awaited<ReturnType<typeof getUserMainCenters>>, QueryKey, GetUserMainCentersParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserMainCentersInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserMainCentersQueryOptions = <TData = Awaited<ReturnType<typeof getUserMainCenters>>, TError = unknown>(params: GetUserMainCentersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMainCenters>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserMainCentersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserMainCenters>>> = ({ signal }) => getUserMainCenters(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserMainCenters>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserMainCentersQueryResult = NonNullable<Awaited<ReturnType<typeof getUserMainCenters>>>
export type GetUserMainCentersQueryError = unknown


export function useGetUserMainCenters<TData = Awaited<ReturnType<typeof getUserMainCenters>>, TError = unknown>(
 params: GetUserMainCentersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMainCenters>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMainCenters>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMainCenters<TData = Awaited<ReturnType<typeof getUserMainCenters>>, TError = unknown>(
 params: GetUserMainCentersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMainCenters>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMainCenters>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserMainCenters<TData = Awaited<ReturnType<typeof getUserMainCenters>>, TError = unknown>(
 params: GetUserMainCentersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMainCenters>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Î©îÏù∏ÏóêÏÑú Ìä∏Î†àÏù¥ÎÑàÍ∞Ä ÏßÄÏ†ïÌïú ÏÑºÌÑ∞ Î™©Î°ù Ï°∞Ìöå API
 */

export function useGetUserMainCenters<TData = Awaited<ReturnType<typeof getUserMainCenters>>, TError = unknown>(
 params: GetUserMainCentersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMainCenters>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserMainCentersQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Ìä∏Î†àÏù¥ÎÑà Ï†ïÎ≥¥ Ï°∞Ìöå API ÏûÖÎãàÎã§.
 * @summary Ìä∏Î†àÏù¥ÎÑà Ï†ïÎ≥¥ Ï°∞Ìöå API
 */
export const getUserInfo = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageUserInfoResDto>(
      {url: `/api/v1/user/info`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserInfoQueryKey = () => {
    return [`/api/v1/user/info`] as const;
    }

    
export const getGetUserInfoInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserInfo>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserInfo>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserInfoQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserInfo>>> = ({ signal }) => getUserInfo(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserInfo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserInfoInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserInfo>>>
export type GetUserInfoInfiniteQueryError = unknown


export function useGetUserInfoInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserInfo>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserInfo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserInfo>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserInfoInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserInfo>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserInfo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserInfo>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserInfoInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserInfo>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserInfo>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ìä∏Î†àÏù¥ÎÑà Ï†ïÎ≥¥ Ï°∞Ìöå API
 */

export function useGetUserInfoInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserInfo>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserInfo>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserInfoInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserInfoQueryOptions = <TData = Awaited<ReturnType<typeof getUserInfo>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserInfo>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserInfoQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserInfo>>> = ({ signal }) => getUserInfo(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserInfo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserInfoQueryResult = NonNullable<Awaited<ReturnType<typeof getUserInfo>>>
export type GetUserInfoQueryError = unknown


export function useGetUserInfo<TData = Awaited<ReturnType<typeof getUserInfo>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserInfo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserInfo>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserInfo<TData = Awaited<ReturnType<typeof getUserInfo>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserInfo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserInfo>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserInfo<TData = Awaited<ReturnType<typeof getUserInfo>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserInfo>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ìä∏Î†àÏù¥ÎÑà Ï†ïÎ≥¥ Ï°∞Ìöå API
 */

export function useGetUserInfo<TData = Awaited<ReturnType<typeof getUserInfo>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserInfo>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserInfoQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Ìä∏Î†àÏù¥ÎÑàÍ∞Ä ÏßÄÏ†ïÌïú ÏÑºÌÑ∞ Î™©Î°ù Ï°∞Ìöå API ÏûÖÎãàÎã§.
 * @summary Ìä∏Î†àÏù¥ÎÑàÍ∞Ä ÏßÄÏ†ïÌïú ÏÑºÌÑ∞ Î™©Î°ù Ï°∞Ìöå API
 */
export const getUserCenters = (
    params: GetUserCentersParams,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessagePageResponseDtoUserCenterListResDto>(
      {url: `/api/v1/user/centers`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUserCentersQueryKey = (params: GetUserCentersParams,) => {
    return [`/api/v1/user/centers`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserCentersInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserCenters>>, GetUserCentersParams['page']>, TError = unknown>(params: GetUserCentersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserCenters>>, TError, TData, Awaited<ReturnType<typeof getUserCenters>>, QueryKey, GetUserCentersParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserCentersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserCenters>>, QueryKey, GetUserCentersParams['page']> = ({ signal, pageParam }) => getUserCenters({...params, page: pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserCenters>>, TError, TData, Awaited<ReturnType<typeof getUserCenters>>, QueryKey, GetUserCentersParams['page']> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserCentersInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserCenters>>>
export type GetUserCentersInfiniteQueryError = unknown


export function useGetUserCentersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserCenters>>, GetUserCentersParams['page']>, TError = unknown>(
 params: GetUserCentersParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserCenters>>, TError, TData, Awaited<ReturnType<typeof getUserCenters>>, QueryKey, GetUserCentersParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserCenters>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserCentersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserCenters>>, GetUserCentersParams['page']>, TError = unknown>(
 params: GetUserCentersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserCenters>>, TError, TData, Awaited<ReturnType<typeof getUserCenters>>, QueryKey, GetUserCentersParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserCenters>>,
          TError,
          TData, QueryKey
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserCentersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserCenters>>, GetUserCentersParams['page']>, TError = unknown>(
 params: GetUserCentersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserCenters>>, TError, TData, Awaited<ReturnType<typeof getUserCenters>>, QueryKey, GetUserCentersParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ìä∏Î†àÏù¥ÎÑàÍ∞Ä ÏßÄÏ†ïÌïú ÏÑºÌÑ∞ Î™©Î°ù Ï°∞Ìöå API
 */

export function useGetUserCentersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserCenters>>, GetUserCentersParams['page']>, TError = unknown>(
 params: GetUserCentersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserCenters>>, TError, TData, Awaited<ReturnType<typeof getUserCenters>>, QueryKey, GetUserCentersParams['page']>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserCentersInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserCentersQueryOptions = <TData = Awaited<ReturnType<typeof getUserCenters>>, TError = unknown>(params: GetUserCentersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCenters>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserCentersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserCenters>>> = ({ signal }) => getUserCenters(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserCenters>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserCentersQueryResult = NonNullable<Awaited<ReturnType<typeof getUserCenters>>>
export type GetUserCentersQueryError = unknown


export function useGetUserCenters<TData = Awaited<ReturnType<typeof getUserCenters>>, TError = unknown>(
 params: GetUserCentersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCenters>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserCenters>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserCenters<TData = Awaited<ReturnType<typeof getUserCenters>>, TError = unknown>(
 params: GetUserCentersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCenters>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserCenters>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserCenters<TData = Awaited<ReturnType<typeof getUserCenters>>, TError = unknown>(
 params: GetUserCentersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCenters>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ìä∏Î†àÏù¥ÎÑàÍ∞Ä ÏßÄÏ†ïÌïú ÏÑºÌÑ∞ Î™©Î°ù Ï°∞Ìöå API
 */

export function useGetUserCenters<TData = Awaited<ReturnType<typeof getUserCenters>>, TError = unknown>(
 params: GetUserCentersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCenters>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserCentersQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ÏÑºÌÑ∞ Î™©Î°ù Ï°∞Ìöå API ÏûÖÎãàÎã§.
 * @summary ÏÑºÌÑ∞ Î™©Î°ù Ï°∞Ìöå API
 */
export const getUserCenterList = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApiResponseMessageListCenterListResDto>(
      {url: `/api/v1/user/center/list`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserCenterListQueryKey = () => {
    return [`/api/v1/user/center/list`] as const;
    }

    
export const getGetUserCenterListInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUserCenterList>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserCenterList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserCenterListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserCenterList>>> = ({ signal }) => getUserCenterList(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserCenterList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserCenterListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserCenterList>>>
export type GetUserCenterListInfiniteQueryError = unknown


export function useGetUserCenterListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserCenterList>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserCenterList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserCenterList>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserCenterListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserCenterList>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserCenterList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserCenterList>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserCenterListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserCenterList>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserCenterList>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÏÑºÌÑ∞ Î™©Î°ù Ï°∞Ìöå API
 */

export function useGetUserCenterListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUserCenterList>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserCenterList>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserCenterListInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserCenterListQueryOptions = <TData = Awaited<ReturnType<typeof getUserCenterList>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCenterList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserCenterListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserCenterList>>> = ({ signal }) => getUserCenterList(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserCenterList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserCenterListQueryResult = NonNullable<Awaited<ReturnType<typeof getUserCenterList>>>
export type GetUserCenterListQueryError = unknown


export function useGetUserCenterList<TData = Awaited<ReturnType<typeof getUserCenterList>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCenterList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserCenterList>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserCenterList<TData = Awaited<ReturnType<typeof getUserCenterList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCenterList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserCenterList>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUserCenterList<TData = Awaited<ReturnType<typeof getUserCenterList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCenterList>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÏÑºÌÑ∞ Î™©Î°ù Ï°∞Ìöå API
 */

export function useGetUserCenterList<TData = Awaited<ReturnType<typeof getUserCenterList>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserCenterList>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserCenterListQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



