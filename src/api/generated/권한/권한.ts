/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Fittner API
 * Fittner API with Spring Boot
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import type {
  AccessTokenReqDto,
  ApiResponseMessageObject,
  ApiResponseMessageTokenResDto,
  LoginRequestDto
} from '.././models'
import { axiosInstance } from '../../mutator/instance-wrapper';
import useAuthStore from "@/store/auth.ts";



/**
 * ÏóëÏÑ∏Ïä§ ÌÜ†ÌÅ∞ÏùÑ Ïû¨Î∞úÍ∏â Î∞õÏäµÎãàÎã§.
 * @summary ÏóëÏÑ∏Ïä§ ÌÜ†ÌÅ∞ Ïû¨Î∞úÍ∏â API
 */
export const postAuthRefreshToken = (
    accessTokenReqDto: AccessTokenReqDto,
 signal?: AbortSignal
) => {


      return axiosInstance<ApiResponseMessageTokenResDto>(
      {url: `/api/v1/auth/refresh-token`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: accessTokenReqDto, signal
    },
      );
    }



export const getPostAuthRefreshTokenMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthRefreshToken>>, TError,{data: AccessTokenReqDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postAuthRefreshToken>>, TError,{data: AccessTokenReqDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};




      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthRefreshToken>>, {data: AccessTokenReqDto}> = (props) => {
          const {data} = props ?? {};

          return  postAuthRefreshToken(data,)
        }




  return  { mutationFn, ...mutationOptions }}

    export type PostAuthRefreshTokenMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthRefreshToken>>>
    export type PostAuthRefreshTokenMutationBody = AccessTokenReqDto
    export type PostAuthRefreshTokenMutationError = unknown

    /**
 * @summary ÏóëÏÑ∏Ïä§ ÌÜ†ÌÅ∞ Ïû¨Î∞úÍ∏â API
 */
export const usePostAuthRefreshToken = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthRefreshToken>>, TError,{data: AccessTokenReqDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthRefreshToken>>,
        TError,
        {data: AccessTokenReqDto},
        TContext
      > => {

      const mutationOptions = getPostAuthRefreshTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Ìä∏Î†àÏù¥ÎÑà Î°úÍ∑∏ÏïÑÏõÉ API ÏûÖÎãàÎã§.
 * @summary Ìä∏Î†àÏù¥ÎÑà Î°úÍ∑∏ÏïÑÏõÉ API
 */
export const postAuthLogout = (

 signal?: AbortSignal
) => {


      return axiosInstance<ApiResponseMessageObject>(
      {url: `/api/v1/auth/logout`, method: 'POST', signal
    },
      );
    }

export async function getPushList() {

    console.log("::: [[[logout test]]] :::")

    const response = await fetch(`https://api.fittner.co.kr/api/v1/auth/logout`, {
        method: "POST",
        mode: "cors",
        cache: "no-cache",
        headers: {
            "Content-Type": "application/json",
            Authorization: 'Bearer ' + useAuthStore.getState(),
        },
    });

    console.log(response.json())
}



export const getPostAuthLogoutMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthLogout>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postAuthLogout>>, TError,void, TContext> => {
const {mutation: mutationOptions} = options ?? {};




      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthLogout>>, void> = () => {


          return  postAuthLogout()
        }




  return  { mutationFn, ...mutationOptions }}

    export type PostAuthLogoutMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthLogout>>>

    export type PostAuthLogoutMutationError = unknown

    /**
 * @summary Ìä∏Î†àÏù¥ÎÑà Î°úÍ∑∏ÏïÑÏõÉ API
 */
export const usePostAuthLogout = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthLogout>>, TError,void, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthLogout>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostAuthLogoutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Ìä∏Î†àÏù¥ÎÑà Î°úÍ∑∏Ïù∏ API ÏûÖÎãàÎã§.
 * @summary Ìä∏Î†àÏù¥ÎÑà Î°úÍ∑∏Ïù∏ API
 */
export const postAuthLogin = (
    loginRequestDto: LoginRequestDto,
 signal?: AbortSignal
) => {


      return axiosInstance<ApiResponseMessageTokenResDto>(
      {url: `/api/v1/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginRequestDto, signal
    },
      );
    }



export const getPostAuthLoginMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError,{data: LoginRequestDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError,{data: LoginRequestDto}, TContext> => {
const {mutation: mutationOptions} = options ?? {};




      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthLogin>>, {data: LoginRequestDto}> = (props) => {
          const {data} = props ?? {};

          return  postAuthLogin(data,)
        }




  return  { mutationFn, ...mutationOptions }}

    export type PostAuthLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthLogin>>>
    export type PostAuthLoginMutationBody = LoginRequestDto
    export type PostAuthLoginMutationError = unknown

    /**
 * @summary Ìä∏Î†àÏù¥ÎÑà Î°úÍ∑∏Ïù∏ API
 */
export const usePostAuthLogin = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError,{data: LoginRequestDto}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthLogin>>,
        TError,
        {data: LoginRequestDto},
        TContext
      > => {

      const mutationOptions = getPostAuthLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
