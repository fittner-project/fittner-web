/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Fittner API
 * Fittner API with Spring Boot
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";
import type {
  AccessTokenReqDto,
  ApiResponseMessageObject,
  ApiResponseMessageTokenResDto,
  LoginRequestDto,
} from ".././models";
import { customInstance } from "../../mutator/custom-instance";

/**
 * ÏóëÏÑ∏Ïä§ ÌÜ†ÌÅ∞ÏùÑ Ïû¨Î∞úÍ∏â Î∞õÏäµÎãàÎã§.
 * @summary ÏóëÏÑ∏Ïä§ ÌÜ†ÌÅ∞ Ïû¨Î∞úÍ∏â API
 */
export const makeAccessToken = (
  accessTokenReqDto: AccessTokenReqDto,
  signal?: AbortSignal
) => {
  return customInstance<ApiResponseMessageTokenResDto>({
    url: `/api/v1/auth/refresh-token`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: accessTokenReqDto,
    signal,
  });
};

export const getMakeAccessTokenMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof makeAccessToken>>,
    TError,
    { data: AccessTokenReqDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof makeAccessToken>>,
  TError,
  { data: AccessTokenReqDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof makeAccessToken>>,
    { data: AccessTokenReqDto }
  > = (props) => {
    const { data } = props ?? {};

    return makeAccessToken(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type MakeAccessTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof makeAccessToken>>
>;
export type MakeAccessTokenMutationBody = AccessTokenReqDto;
export type MakeAccessTokenMutationError = unknown;

/**
 * @summary ÏóëÏÑ∏Ïä§ ÌÜ†ÌÅ∞ Ïû¨Î∞úÍ∏â API
 */
export const useMakeAccessToken = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof makeAccessToken>>,
    TError,
    { data: AccessTokenReqDto },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof makeAccessToken>>,
  TError,
  { data: AccessTokenReqDto },
  TContext
> => {
  const mutationOptions = getMakeAccessTokenMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Ìä∏Î†àÏù¥ÎÑà Î°úÍ∑∏ÏïÑÏõÉ API ÏûÖÎãàÎã§.
 * @summary Ìä∏Î†àÏù¥ÎÑà Î°úÍ∑∏ÏïÑÏõÉ API
 */
export const logout = (signal?: AbortSignal) => {
  return customInstance<ApiResponseMessageObject>({
    url: `/api/v1/auth/logout`,
    method: "POST",
    signal,
  });
};

export const getLogoutMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof logout>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof logout>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof logout>>,
    void
  > = () => {
    return logout();
  };

  return { mutationFn, ...mutationOptions };
};

export type LogoutMutationResult = NonNullable<
  Awaited<ReturnType<typeof logout>>
>;

export type LogoutMutationError = unknown;

/**
 * @summary Ìä∏Î†àÏù¥ÎÑà Î°úÍ∑∏ÏïÑÏõÉ API
 */
export const useLogout = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof logout>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof logout>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getLogoutMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Ìä∏Î†àÏù¥ÎÑà Î°úÍ∑∏Ïù∏ API ÏûÖÎãàÎã§.
 * @summary Ìä∏Î†àÏù¥ÎÑà Î°úÍ∑∏Ïù∏ API
 */
export const login = (
  loginRequestDto: LoginRequestDto,
  signal?: AbortSignal
) => {
  return customInstance<ApiResponseMessageTokenResDto>({
    url: `/api/v1/auth/login`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: loginRequestDto,
    signal,
  });
};

export const getLoginMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof login>>,
    TError,
    { data: LoginRequestDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof login>>,
  TError,
  { data: LoginRequestDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof login>>,
    { data: LoginRequestDto }
  > = (props) => {
    const { data } = props ?? {};

    return login(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type LoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof login>>
>;
export type LoginMutationBody = LoginRequestDto;
export type LoginMutationError = unknown;

/**
 * @summary Ìä∏Î†àÏù¥ÎÑà Î°úÍ∑∏Ïù∏ API
 */
export const useLogin = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof login>>,
    TError,
    { data: LoginRequestDto },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof login>>,
  TError,
  { data: LoginRequestDto },
  TContext
> => {
  const mutationOptions = getLoginMutationOptions(options);

  return useMutation(mutationOptions);
};
